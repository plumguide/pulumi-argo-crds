// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace argoproj {
    export namespace v1alpha1 {
        export interface ClusterWorkflowTemplateSpec {
            activeDeadlineSeconds?: pulumi.Input<number>;
            affinity?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinity>;
            arguments?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArguments>;
            artifactRepositoryRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArtifactRepositoryRef>;
            automountServiceAccountToken?: pulumi.Input<boolean>;
            dnsConfig?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecDnsConfig>;
            dnsPolicy?: pulumi.Input<string>;
            entrypoint?: pulumi.Input<string>;
            executor?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecExecutor>;
            hostAliases?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecHostAliases>[]>;
            hostNetwork?: pulumi.Input<boolean>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecImagePullSecrets>[]>;
            metrics?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecMetrics>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            onExit?: pulumi.Input<string>;
            parallelism?: pulumi.Input<number>;
            podDisruptionBudget?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecPodDisruptionBudget>;
            podGC?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecPodGC>;
            podPriority?: pulumi.Input<number>;
            podPriorityClassName?: pulumi.Input<string>;
            podSpecPatch?: pulumi.Input<string>;
            priority?: pulumi.Input<number>;
            schedulerName?: pulumi.Input<string>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecSecurityContext>;
            serviceAccountName?: pulumi.Input<string>;
            shutdown?: pulumi.Input<string>;
            suspend?: pulumi.Input<boolean>;
            synchronization?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecSynchronization>;
            templates?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplates>[]>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTolerations>[]>;
            ttlSecondsAfterFinished?: pulumi.Input<number>;
            ttlStrategy?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTtlStrategy>;
            volumeClaimTemplates?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumeClaimTemplates>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumes>[]>;
            workflowMetadata?: pulumi.Input<{[key: string]: any}>;
            workflowTemplateRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecWorkflowTemplateRef>;
        }

        export interface ClusterWorkflowTemplateSpecAffinity {
            nodeAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityPodAntiAffinity>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ClusterWorkflowTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecArguments {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsParameters>[]>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsArchiveTar>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsArtifactoryUsernameSecret>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsGitUsernameSecret>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsOssSecretKeySecret>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecArgumentsParametersValueFrom>;
        }

        export interface ClusterWorkflowTemplateSpecArgumentsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface ClusterWorkflowTemplateSpecArtifactRepositoryRef {
            configMap?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecDnsConfig {
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            options?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecDnsConfigOptions>[]>;
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecDnsConfigOptions {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecExecutor {
            serviceAccountName?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecHostAliases {
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            ip?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecMetrics {
            prometheus: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecMetricsPrometheus>[]>;
        }

        export interface ClusterWorkflowTemplateSpecMetricsPrometheus {
            counter?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecMetricsPrometheusCounter>;
            gauge?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecMetricsPrometheusGauge>;
            help: pulumi.Input<string>;
            histogram?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecMetricsPrometheusHistogram>;
            labels?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecMetricsPrometheusLabels>[]>;
            name: pulumi.Input<string>;
            when?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecMetricsPrometheusCounter {
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecMetricsPrometheusGauge {
            realtime: pulumi.Input<boolean>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecMetricsPrometheusHistogram {
            buckets: pulumi.Input<pulumi.Input<number>[]>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecMetricsPrometheusLabels {
            key: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecPodDisruptionBudget {
            maxUnavailable?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecPodDisruptionBudgetMaxUnavailable>;
            minAvailable?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecPodDisruptionBudgetMinAvailable>;
            selector?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecPodDisruptionBudgetSelector>;
        }

        export interface ClusterWorkflowTemplateSpecPodDisruptionBudgetMaxUnavailable {
        }

        export interface ClusterWorkflowTemplateSpecPodDisruptionBudgetMinAvailable {
        }

        export interface ClusterWorkflowTemplateSpecPodDisruptionBudgetSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecPodDisruptionBudgetSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ClusterWorkflowTemplateSpecPodDisruptionBudgetSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecPodGC {
            strategy?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecSecurityContext {
            fsGroup?: pulumi.Input<number>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecSecurityContextSeLinuxOptions>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecSecurityContextWindowsOptions>;
        }

        export interface ClusterWorkflowTemplateSpecSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecSecurityContextSysctls {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecSynchronization {
            mutex?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecSynchronizationMutex>;
            semaphore?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecSynchronizationSemaphore>;
        }

        export interface ClusterWorkflowTemplateSpecSynchronizationMutex {
            name?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecSynchronizationSemaphore {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecSynchronizationSemaphoreConfigMapKeyRef>;
        }

        export interface ClusterWorkflowTemplateSpecSynchronizationSemaphoreConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplates {
            activeDeadlineSeconds?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesActiveDeadlineSeconds>;
            affinity?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinity>;
            archiveLocation?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArchiveLocation>;
            arguments?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArguments>;
            automountServiceAccountToken?: pulumi.Input<boolean>;
            container?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainer>;
            daemon?: pulumi.Input<boolean>;
            dag?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDag>;
            executor?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesExecutor>;
            hostAliases?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesHostAliases>[]>;
            initContainers?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainers>[]>;
            inputs?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputs>;
            memoize?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesMemoize>;
            metadata?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesMetadata>;
            metrics?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesMetrics>;
            name: pulumi.Input<string>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            outputs?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputs>;
            parallelism?: pulumi.Input<number>;
            podSpecPatch?: pulumi.Input<string>;
            priority?: pulumi.Input<number>;
            priorityClassName?: pulumi.Input<string>;
            resource?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesResource>;
            resubmitPendingPods?: pulumi.Input<boolean>;
            retryStrategy?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesRetryStrategy>;
            schedulerName?: pulumi.Input<string>;
            script?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScript>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSecurityContext>;
            serviceAccountName?: pulumi.Input<string>;
            sidecars?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecars>[]>;
            steps?: pulumi.Input<pulumi.Input<any[]>[]>;
            suspend?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSuspend>;
            synchronization?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSynchronization>;
            template?: pulumi.Input<string>;
            templateRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesTemplateRef>;
            timeout?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesTolerations>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumes>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesActiveDeadlineSeconds {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinity {
            nodeAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityPodAntiAffinity>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArchiveLocation {
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArchiveLocationArtifactory>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArchiveLocationGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArchiveLocationGit>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArchiveLocationHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArchiveLocationHttp>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArchiveLocationOss>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArchiveLocationRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArchiveLocationS3>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArchiveLocationArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArchiveLocationArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArchiveLocationArtifactoryUsernameSecret>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArchiveLocationArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArchiveLocationArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArchiveLocationGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArchiveLocationGcsServiceAccountKeySecret>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArchiveLocationGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArchiveLocationGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArchiveLocationGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArchiveLocationGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArchiveLocationGitUsernameSecret>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArchiveLocationGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArchiveLocationGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArchiveLocationGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArchiveLocationHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArchiveLocationHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArchiveLocationHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArchiveLocationHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArchiveLocationHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArchiveLocationHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArchiveLocationHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArchiveLocationHttp {
            url: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArchiveLocationOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArchiveLocationOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArchiveLocationOssSecretKeySecret>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArchiveLocationOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArchiveLocationOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArchiveLocationRaw {
            data: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArchiveLocationS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArchiveLocationS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArchiveLocationS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArchiveLocationS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArchiveLocationS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArguments {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsParameters>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsArchiveTar>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsArtifactoryUsernameSecret>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsGitUsernameSecret>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsOssSecretKeySecret>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesArgumentsParametersValueFrom>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesArgumentsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainer {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerEnvFrom>[]>;
            image: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerLivenessProbe>;
            name?: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerSecurityContext>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerEnvValueFrom>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerEnvFromSecretRef>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerEnvValueFromSecretKeyRef>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerEnvValueFromResourceFieldRefDivisor {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePreStop>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePostStartTcpSocket>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePostStartHttpGetPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePostStartTcpSocketPort>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePostStartTcpSocketPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePreStopTcpSocket>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePreStopHttpGetPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePreStopTcpSocketPort>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerLifecyclePreStopTcpSocketPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerLivenessProbeHttpGetPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerLivenessProbeTcpSocketPort>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerLivenessProbeTcpSocketPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerReadinessProbeHttpGetPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerReadinessProbeTcpSocketPort>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerReadinessProbeTcpSocketPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerResourcesRequests>}>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerResourcesLimits {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerResourcesRequests {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerSecurityContextWindowsOptions>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerStartupProbeHttpGetPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesContainerStartupProbeTcpSocketPort>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerStartupProbeTcpSocketPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesContainerVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDag {
            failFast?: pulumi.Input<boolean>;
            target?: pulumi.Input<string>;
            tasks: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasks>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasks {
            arguments?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArguments>;
            continueOn?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksContinueOn>;
            dependencies?: pulumi.Input<pulumi.Input<string>[]>;
            depends?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            onExit?: pulumi.Input<string>;
            template: pulumi.Input<string>;
            templateRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksTemplateRef>;
            when?: pulumi.Input<string>;
            withItems?: pulumi.Input<pulumi.Input<{[key: string]: any}>[]>;
            withParam?: pulumi.Input<string>;
            withSequence?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksWithSequence>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArguments {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsParameters>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArchiveTar>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArtifactoryUsernameSecret>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGitUsernameSecret>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsOssSecretKeySecret>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsParametersValueFrom>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksArgumentsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksContinueOn {
            error?: pulumi.Input<boolean>;
            failed?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksTemplateRef {
            clusterScope?: pulumi.Input<boolean>;
            name?: pulumi.Input<string>;
            runtimeResolution?: pulumi.Input<boolean>;
            template?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksWithSequence {
            count?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksWithSequenceCount>;
            end?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksWithSequenceEnd>;
            format?: pulumi.Input<string>;
            start?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesDagTasksWithSequenceStart>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksWithSequenceCount {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksWithSequenceEnd {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesDagTasksWithSequenceStart {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesExecutor {
            serviceAccountName?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesHostAliases {
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            ip?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainers {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersLivenessProbe>;
            mirrorVolumeMounts?: pulumi.Input<boolean>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersSecurityContext>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersEnvValueFrom>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersEnvFromSecretRef>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersEnvValueFromSecretKeyRef>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersEnvValueFromResourceFieldRefDivisor {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStop>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartTcpSocket>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartHttpGetPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartTcpSocketPort>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartTcpSocketPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopTcpSocket>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopHttpGetPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopTcpSocketPort>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopTcpSocketPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersLivenessProbeHttpGetPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersLivenessProbeTcpSocketPort>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersLivenessProbeTcpSocketPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersReadinessProbeHttpGetPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersReadinessProbeTcpSocketPort>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersReadinessProbeTcpSocketPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersResourcesRequests>}>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersResourcesLimits {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersResourcesRequests {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersSecurityContextWindowsOptions>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersStartupProbeHttpGetPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInitContainersStartupProbeTcpSocketPort>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersStartupProbeTcpSocketPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInitContainersVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputs {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsParameters>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsArchiveTar>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsArtifactoryUsernameSecret>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsGitUsernameSecret>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsOssSecretKeySecret>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesInputsParametersValueFrom>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesInputsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesMemoize {
            cache: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesMemoizeCache>;
            key: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesMemoizeCache {
            configMap: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesMemoizeCacheConfigMap>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesMemoizeCacheConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesMetrics {
            prometheus: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesMetricsPrometheus>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesMetricsPrometheus {
            counter?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesMetricsPrometheusCounter>;
            gauge?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesMetricsPrometheusGauge>;
            help: pulumi.Input<string>;
            histogram?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesMetricsPrometheusHistogram>;
            labels?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesMetricsPrometheusLabels>[]>;
            name: pulumi.Input<string>;
            when?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesMetricsPrometheusCounter {
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesMetricsPrometheusGauge {
            realtime: pulumi.Input<boolean>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesMetricsPrometheusHistogram {
            buckets: pulumi.Input<pulumi.Input<number>[]>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesMetricsPrometheusLabels {
            key: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputs {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifacts>[]>;
            exitCode?: pulumi.Input<string>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsParameters>[]>;
            result?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsArchiveTar>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsArtifactoryUsernameSecret>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsGitUsernameSecret>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsOssSecretKeySecret>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesOutputsParametersValueFrom>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesOutputsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesResource {
            action: pulumi.Input<string>;
            failureCondition?: pulumi.Input<string>;
            flags?: pulumi.Input<pulumi.Input<string>[]>;
            manifest?: pulumi.Input<string>;
            mergeStrategy?: pulumi.Input<string>;
            setOwnerReference?: pulumi.Input<boolean>;
            successCondition?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesRetryStrategy {
            backoff?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesRetryStrategyBackoff>;
            limit?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesRetryStrategyLimit>;
            retryPolicy?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesRetryStrategyBackoff {
            duration?: pulumi.Input<string>;
            factor?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesRetryStrategyBackoffFactor>;
            maxDuration?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesRetryStrategyBackoffFactor {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesRetryStrategyLimit {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScript {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptEnvFrom>[]>;
            image: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptLivenessProbe>;
            name?: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptSecurityContext>;
            source: pulumi.Input<string>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptEnvValueFrom>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptEnvFromSecretRef>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptEnvValueFromSecretKeyRef>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptEnvValueFromResourceFieldRefDivisor {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePreStop>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePostStartTcpSocket>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePostStartHttpGetPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePostStartTcpSocketPort>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePostStartTcpSocketPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePreStopTcpSocket>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePreStopHttpGetPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePreStopTcpSocketPort>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptLifecyclePreStopTcpSocketPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptLivenessProbeHttpGetPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptLivenessProbeTcpSocketPort>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptLivenessProbeTcpSocketPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptReadinessProbeHttpGetPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptReadinessProbeTcpSocketPort>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptReadinessProbeTcpSocketPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptResourcesRequests>}>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptResourcesLimits {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptResourcesRequests {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptSecurityContextWindowsOptions>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptStartupProbeHttpGetPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesScriptStartupProbeTcpSocketPort>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptStartupProbeTcpSocketPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesScriptVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSecurityContext {
            fsGroup?: pulumi.Input<number>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSecurityContextSeLinuxOptions>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSecurityContextWindowsOptions>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSecurityContextSysctls {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecars {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsLivenessProbe>;
            mirrorVolumeMounts?: pulumi.Input<boolean>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsSecurityContext>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsEnvValueFrom>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsEnvFromSecretRef>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsEnvValueFromSecretKeyRef>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsEnvValueFromResourceFieldRefDivisor {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStop>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartTcpSocket>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartHttpGetPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartTcpSocketPort>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartTcpSocketPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopTcpSocket>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopHttpGetPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopTcpSocketPort>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopTcpSocketPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsLivenessProbeHttpGetPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsLivenessProbeTcpSocketPort>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsLivenessProbeTcpSocketPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsReadinessProbeHttpGetPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsReadinessProbeTcpSocketPort>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsReadinessProbeTcpSocketPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsResourcesRequests>}>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsResourcesLimits {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsResourcesRequests {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsSecurityContextWindowsOptions>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsStartupProbeHttpGetPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSidecarsStartupProbeTcpSocketPort>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsStartupProbeTcpSocketPort {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSidecarsVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSuspend {
            duration?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSynchronization {
            mutex?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSynchronizationMutex>;
            semaphore?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSynchronizationSemaphore>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSynchronizationMutex {
            name?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSynchronizationSemaphore {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesSynchronizationSemaphoreConfigMapKeyRef>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesSynchronizationSemaphoreConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesTemplateRef {
            clusterScope?: pulumi.Input<boolean>;
            name?: pulumi.Input<string>;
            runtimeResolution?: pulumi.Input<boolean>;
            template?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesCephfs>;
            cinder?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesCinder>;
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesConfigMap>;
            csi?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesEmptyDir>;
            fc?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesFc>;
            flexVolume?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesIscsi>;
            name: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesProjected>;
            quobyte?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesScaleIO>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesSecret>;
            storageos?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesVsphereVolume>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName: pulumi.Input<string>;
            diskURI: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName: pulumi.Input<string>;
            shareName: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesCephfs {
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesCinderSecretRef>;
            volumeID: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesCsi {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesDownwardAPIItems>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesEmptyDirSizeLimit>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesEmptyDirSizeLimit {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesFlexVolume {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesFlexVolumeSecretRef>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesGlusterfs {
            endpoints: pulumi.Input<string>;
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesHostPath {
            path: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesIscsiSecretRef>;
            targetPortal: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesNfs {
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesPersistentVolumeClaim {
            claimName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesProjectedSources>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesProjectedSourcesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesProjectedSourcesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesRbd {
            fsType?: pulumi.Input<string>;
            image: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecTemplatesVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTemplatesVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecTtlStrategy {
            secondsAfterCompletion?: pulumi.Input<number>;
            secondsAfterFailure?: pulumi.Input<number>;
            secondsAfterSuccess?: pulumi.Input<number>;
        }

        export interface ClusterWorkflowTemplateSpecVolumeClaimTemplates {
            apiVersion?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            metadata?: pulumi.Input<{[key: string]: any}>;
            spec?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumeClaimTemplatesSpec>;
            status?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumeClaimTemplatesStatus>;
        }

        export interface ClusterWorkflowTemplateSpecVolumeClaimTemplatesSpec {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumeClaimTemplatesSpecDataSource>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumeClaimTemplatesSpecResources>;
            selector?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumeClaimTemplatesSpecSelector>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumeClaimTemplatesSpecDataSource {
            apiGroup?: pulumi.Input<string>;
            kind: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumeClaimTemplatesSpecResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumeClaimTemplatesSpecResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumeClaimTemplatesSpecResourcesRequests>}>;
        }

        export interface ClusterWorkflowTemplateSpecVolumeClaimTemplatesSpecResourcesLimits {
        }

        export interface ClusterWorkflowTemplateSpecVolumeClaimTemplatesSpecResourcesRequests {
        }

        export interface ClusterWorkflowTemplateSpecVolumeClaimTemplatesSpecSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumeClaimTemplatesSpecSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ClusterWorkflowTemplateSpecVolumeClaimTemplatesSpecSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecVolumeClaimTemplatesStatus {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            capacity?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumeClaimTemplatesStatusCapacity>}>;
            conditions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumeClaimTemplatesStatusConditions>[]>;
            phase?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumeClaimTemplatesStatusCapacity {
        }

        export interface ClusterWorkflowTemplateSpecVolumeClaimTemplatesStatusConditions {
            lastProbeTime?: pulumi.Input<string>;
            lastTransitionTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            reason?: pulumi.Input<string>;
            status: pulumi.Input<string>;
            type: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesCephfs>;
            cinder?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesCinder>;
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesConfigMap>;
            csi?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesEmptyDir>;
            fc?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesFc>;
            flexVolume?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesIscsi>;
            name: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesProjected>;
            quobyte?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesScaleIO>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesSecret>;
            storageos?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesVsphereVolume>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName: pulumi.Input<string>;
            diskURI: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName: pulumi.Input<string>;
            shareName: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesCephfs {
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesCinderSecretRef>;
            volumeID: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesCsi {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesDownwardAPIItems>[]>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface ClusterWorkflowTemplateSpecVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesEmptyDirSizeLimit>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesEmptyDirSizeLimit {
        }

        export interface ClusterWorkflowTemplateSpecVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesFlexVolume {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesFlexVolumeSecretRef>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesGlusterfs {
            endpoints: pulumi.Input<string>;
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesHostPath {
            path: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesIscsiSecretRef>;
            targetPortal: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesNfs {
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesPersistentVolumeClaim {
            claimName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesProjectedSources>[]>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesProjectedSourcesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface ClusterWorkflowTemplateSpecVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesProjectedSourcesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesRbd {
            fsType?: pulumi.Input<string>;
            image: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.ClusterWorkflowTemplateSpecVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath: pulumi.Input<string>;
        }

        export interface ClusterWorkflowTemplateSpecWorkflowTemplateRef {
            clusterScope?: pulumi.Input<boolean>;
            name?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpec {
            concurrencyPolicy?: pulumi.Input<string>;
            failedJobsHistoryLimit?: pulumi.Input<number>;
            schedule: pulumi.Input<string>;
            startingDeadlineSeconds?: pulumi.Input<number>;
            successfulJobsHistoryLimit?: pulumi.Input<number>;
            suspend?: pulumi.Input<boolean>;
            timezone?: pulumi.Input<string>;
            workflowMetadata?: pulumi.Input<{[key: string]: any}>;
            workflowSpec: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpec>;
        }

        export interface CronWorkflowSpecWorkflowSpec {
            activeDeadlineSeconds?: pulumi.Input<number>;
            affinity?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinity>;
            arguments?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArguments>;
            artifactRepositoryRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArtifactRepositoryRef>;
            automountServiceAccountToken?: pulumi.Input<boolean>;
            dnsConfig?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecDnsConfig>;
            dnsPolicy?: pulumi.Input<string>;
            entrypoint?: pulumi.Input<string>;
            executor?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecExecutor>;
            hostAliases?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecHostAliases>[]>;
            hostNetwork?: pulumi.Input<boolean>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecImagePullSecrets>[]>;
            metrics?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecMetrics>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            onExit?: pulumi.Input<string>;
            parallelism?: pulumi.Input<number>;
            podDisruptionBudget?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecPodDisruptionBudget>;
            podGC?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecPodGC>;
            podPriority?: pulumi.Input<number>;
            podPriorityClassName?: pulumi.Input<string>;
            podSpecPatch?: pulumi.Input<string>;
            priority?: pulumi.Input<number>;
            schedulerName?: pulumi.Input<string>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecSecurityContext>;
            serviceAccountName?: pulumi.Input<string>;
            shutdown?: pulumi.Input<string>;
            suspend?: pulumi.Input<boolean>;
            synchronization?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecSynchronization>;
            templates?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplates>[]>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTolerations>[]>;
            ttlSecondsAfterFinished?: pulumi.Input<number>;
            ttlStrategy?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTtlStrategy>;
            volumeClaimTemplates?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumeClaimTemplates>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumes>[]>;
            workflowTemplateRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecWorkflowTemplateRef>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinity {
            nodeAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityPodAntiAffinity>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface CronWorkflowSpecWorkflowSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecArguments {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsParameters>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsArchiveTar>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsArtifactoryUsernameSecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsGitUsernameSecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsOssSecretKeySecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecArgumentsParametersValueFrom>;
        }

        export interface CronWorkflowSpecWorkflowSpecArgumentsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface CronWorkflowSpecWorkflowSpecArtifactRepositoryRef {
            configMap?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecDnsConfig {
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            options?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecDnsConfigOptions>[]>;
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecDnsConfigOptions {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecExecutor {
            serviceAccountName?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecHostAliases {
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            ip?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecMetrics {
            prometheus: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecMetricsPrometheus>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecMetricsPrometheus {
            counter?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecMetricsPrometheusCounter>;
            gauge?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecMetricsPrometheusGauge>;
            help: pulumi.Input<string>;
            histogram?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecMetricsPrometheusHistogram>;
            labels?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecMetricsPrometheusLabels>[]>;
            name: pulumi.Input<string>;
            when?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecMetricsPrometheusCounter {
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecMetricsPrometheusGauge {
            realtime: pulumi.Input<boolean>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecMetricsPrometheusHistogram {
            buckets: pulumi.Input<pulumi.Input<number>[]>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecMetricsPrometheusLabels {
            key: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecPodDisruptionBudget {
            maxUnavailable?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecPodDisruptionBudgetMaxUnavailable>;
            minAvailable?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecPodDisruptionBudgetMinAvailable>;
            selector?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecPodDisruptionBudgetSelector>;
        }

        export interface CronWorkflowSpecWorkflowSpecPodDisruptionBudgetMaxUnavailable {
        }

        export interface CronWorkflowSpecWorkflowSpecPodDisruptionBudgetMinAvailable {
        }

        export interface CronWorkflowSpecWorkflowSpecPodDisruptionBudgetSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecPodDisruptionBudgetSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface CronWorkflowSpecWorkflowSpecPodDisruptionBudgetSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecPodGC {
            strategy?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecSecurityContext {
            fsGroup?: pulumi.Input<number>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecSecurityContextSeLinuxOptions>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecSecurityContextWindowsOptions>;
        }

        export interface CronWorkflowSpecWorkflowSpecSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecSecurityContextSysctls {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecSynchronization {
            mutex?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecSynchronizationMutex>;
            semaphore?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecSynchronizationSemaphore>;
        }

        export interface CronWorkflowSpecWorkflowSpecSynchronizationMutex {
            name?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecSynchronizationSemaphore {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecSynchronizationSemaphoreConfigMapKeyRef>;
        }

        export interface CronWorkflowSpecWorkflowSpecSynchronizationSemaphoreConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplates {
            activeDeadlineSeconds?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesActiveDeadlineSeconds>;
            affinity?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinity>;
            archiveLocation?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArchiveLocation>;
            arguments?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArguments>;
            automountServiceAccountToken?: pulumi.Input<boolean>;
            container?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainer>;
            daemon?: pulumi.Input<boolean>;
            dag?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDag>;
            executor?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesExecutor>;
            hostAliases?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesHostAliases>[]>;
            initContainers?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainers>[]>;
            inputs?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputs>;
            memoize?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesMemoize>;
            metadata?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesMetadata>;
            metrics?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesMetrics>;
            name: pulumi.Input<string>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            outputs?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputs>;
            parallelism?: pulumi.Input<number>;
            podSpecPatch?: pulumi.Input<string>;
            priority?: pulumi.Input<number>;
            priorityClassName?: pulumi.Input<string>;
            resource?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesResource>;
            resubmitPendingPods?: pulumi.Input<boolean>;
            retryStrategy?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesRetryStrategy>;
            schedulerName?: pulumi.Input<string>;
            script?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScript>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSecurityContext>;
            serviceAccountName?: pulumi.Input<string>;
            sidecars?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecars>[]>;
            steps?: pulumi.Input<pulumi.Input<any[]>[]>;
            suspend?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSuspend>;
            synchronization?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSynchronization>;
            template?: pulumi.Input<string>;
            templateRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesTemplateRef>;
            timeout?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesTolerations>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumes>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesActiveDeadlineSeconds {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinity {
            nodeAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAntiAffinity>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArchiveLocation {
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationArtifactory>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationGit>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationHttp>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationOss>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationS3>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationArtifactoryUsernameSecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationGcsServiceAccountKeySecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationGitUsernameSecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationHttp {
            url: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationOssSecretKeySecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationRaw {
            data: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArchiveLocationS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArguments {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsParameters>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsArchiveTar>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsArtifactoryUsernameSecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsGitUsernameSecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsOssSecretKeySecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesArgumentsParametersValueFrom>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesArgumentsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainer {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerEnvFrom>[]>;
            image: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerLivenessProbe>;
            name?: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerSecurityContext>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerEnvValueFrom>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerEnvFromSecretRef>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerEnvValueFromSecretKeyRef>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerEnvValueFromResourceFieldRefDivisor {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePreStop>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePostStartTcpSocket>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePostStartHttpGetPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePostStartTcpSocketPort>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePostStartTcpSocketPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePreStopTcpSocket>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePreStopHttpGetPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePreStopTcpSocketPort>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerLifecyclePreStopTcpSocketPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerLivenessProbeHttpGetPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerLivenessProbeTcpSocketPort>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerLivenessProbeTcpSocketPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerReadinessProbeHttpGetPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerReadinessProbeTcpSocketPort>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerReadinessProbeTcpSocketPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerResourcesRequests>}>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerResourcesLimits {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerResourcesRequests {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerSecurityContextWindowsOptions>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerStartupProbeHttpGetPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesContainerStartupProbeTcpSocketPort>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerStartupProbeTcpSocketPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesContainerVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDag {
            failFast?: pulumi.Input<boolean>;
            target?: pulumi.Input<string>;
            tasks: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasks>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasks {
            arguments?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArguments>;
            continueOn?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksContinueOn>;
            dependencies?: pulumi.Input<pulumi.Input<string>[]>;
            depends?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            onExit?: pulumi.Input<string>;
            template: pulumi.Input<string>;
            templateRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksTemplateRef>;
            when?: pulumi.Input<string>;
            withItems?: pulumi.Input<pulumi.Input<{[key: string]: any}>[]>;
            withParam?: pulumi.Input<string>;
            withSequence?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksWithSequence>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArguments {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsParameters>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsArchiveTar>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsArtifactoryUsernameSecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsGitUsernameSecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsOssSecretKeySecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsParametersValueFrom>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksArgumentsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksContinueOn {
            error?: pulumi.Input<boolean>;
            failed?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksTemplateRef {
            clusterScope?: pulumi.Input<boolean>;
            name?: pulumi.Input<string>;
            runtimeResolution?: pulumi.Input<boolean>;
            template?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksWithSequence {
            count?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksWithSequenceCount>;
            end?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksWithSequenceEnd>;
            format?: pulumi.Input<string>;
            start?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesDagTasksWithSequenceStart>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksWithSequenceCount {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksWithSequenceEnd {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesDagTasksWithSequenceStart {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesExecutor {
            serviceAccountName?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesHostAliases {
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            ip?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainers {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersLivenessProbe>;
            mirrorVolumeMounts?: pulumi.Input<boolean>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersSecurityContext>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersEnvValueFrom>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersEnvFromSecretRef>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersEnvValueFromSecretKeyRef>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersEnvValueFromResourceFieldRefDivisor {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePreStop>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePostStartTcpSocket>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePostStartHttpGetPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePostStartTcpSocketPort>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePostStartTcpSocketPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePreStopTcpSocket>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePreStopHttpGetPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePreStopTcpSocketPort>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersLifecyclePreStopTcpSocketPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersLivenessProbeHttpGetPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersLivenessProbeTcpSocketPort>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersLivenessProbeTcpSocketPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersReadinessProbeHttpGetPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersReadinessProbeTcpSocketPort>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersReadinessProbeTcpSocketPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersResourcesRequests>}>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersResourcesLimits {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersResourcesRequests {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersSecurityContextWindowsOptions>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersStartupProbeHttpGetPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInitContainersStartupProbeTcpSocketPort>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersStartupProbeTcpSocketPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInitContainersVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputs {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsParameters>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsArchiveTar>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsArtifactoryUsernameSecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsGitUsernameSecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsOssSecretKeySecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesInputsParametersValueFrom>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesInputsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesMemoize {
            cache: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesMemoizeCache>;
            key: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesMemoizeCache {
            configMap: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesMemoizeCacheConfigMap>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesMemoizeCacheConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesMetrics {
            prometheus: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesMetricsPrometheus>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesMetricsPrometheus {
            counter?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesMetricsPrometheusCounter>;
            gauge?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesMetricsPrometheusGauge>;
            help: pulumi.Input<string>;
            histogram?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesMetricsPrometheusHistogram>;
            labels?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesMetricsPrometheusLabels>[]>;
            name: pulumi.Input<string>;
            when?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesMetricsPrometheusCounter {
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesMetricsPrometheusGauge {
            realtime: pulumi.Input<boolean>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesMetricsPrometheusHistogram {
            buckets: pulumi.Input<pulumi.Input<number>[]>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesMetricsPrometheusLabels {
            key: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputs {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifacts>[]>;
            exitCode?: pulumi.Input<string>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsParameters>[]>;
            result?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsArchiveTar>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsArtifactoryUsernameSecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsGitUsernameSecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsOssSecretKeySecret>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesOutputsParametersValueFrom>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesOutputsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesResource {
            action: pulumi.Input<string>;
            failureCondition?: pulumi.Input<string>;
            flags?: pulumi.Input<pulumi.Input<string>[]>;
            manifest?: pulumi.Input<string>;
            mergeStrategy?: pulumi.Input<string>;
            setOwnerReference?: pulumi.Input<boolean>;
            successCondition?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesRetryStrategy {
            backoff?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesRetryStrategyBackoff>;
            limit?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesRetryStrategyLimit>;
            retryPolicy?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesRetryStrategyBackoff {
            duration?: pulumi.Input<string>;
            factor?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesRetryStrategyBackoffFactor>;
            maxDuration?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesRetryStrategyBackoffFactor {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesRetryStrategyLimit {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScript {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptEnvFrom>[]>;
            image: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptLivenessProbe>;
            name?: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptSecurityContext>;
            source: pulumi.Input<string>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptEnvValueFrom>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptEnvFromSecretRef>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptEnvValueFromSecretKeyRef>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptEnvValueFromResourceFieldRefDivisor {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePreStop>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePostStartTcpSocket>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePostStartHttpGetPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePostStartTcpSocketPort>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePostStartTcpSocketPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePreStopTcpSocket>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePreStopHttpGetPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePreStopTcpSocketPort>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptLifecyclePreStopTcpSocketPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptLivenessProbeHttpGetPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptLivenessProbeTcpSocketPort>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptLivenessProbeTcpSocketPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptReadinessProbeHttpGetPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptReadinessProbeTcpSocketPort>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptReadinessProbeTcpSocketPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptResourcesRequests>}>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptResourcesLimits {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptResourcesRequests {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptSecurityContextWindowsOptions>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptStartupProbeHttpGetPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesScriptStartupProbeTcpSocketPort>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptStartupProbeTcpSocketPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesScriptVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSecurityContext {
            fsGroup?: pulumi.Input<number>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSecurityContextSeLinuxOptions>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSecurityContextWindowsOptions>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSecurityContextSysctls {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecars {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsLivenessProbe>;
            mirrorVolumeMounts?: pulumi.Input<boolean>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsSecurityContext>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsEnvValueFrom>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsEnvFromSecretRef>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsEnvValueFromSecretKeyRef>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsEnvValueFromResourceFieldRefDivisor {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePreStop>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePostStartTcpSocket>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePostStartHttpGetPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePostStartTcpSocketPort>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePostStartTcpSocketPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePreStopTcpSocket>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePreStopHttpGetPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePreStopTcpSocketPort>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsLifecyclePreStopTcpSocketPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsLivenessProbeHttpGetPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsLivenessProbeTcpSocketPort>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsLivenessProbeTcpSocketPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsReadinessProbeHttpGetPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsReadinessProbeTcpSocketPort>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsReadinessProbeTcpSocketPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsResourcesRequests>}>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsResourcesLimits {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsResourcesRequests {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsSecurityContextWindowsOptions>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsStartupProbeHttpGetPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSidecarsStartupProbeTcpSocketPort>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsStartupProbeTcpSocketPort {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSidecarsVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSuspend {
            duration?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSynchronization {
            mutex?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSynchronizationMutex>;
            semaphore?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSynchronizationSemaphore>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSynchronizationMutex {
            name?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSynchronizationSemaphore {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesSynchronizationSemaphoreConfigMapKeyRef>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesSynchronizationSemaphoreConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesTemplateRef {
            clusterScope?: pulumi.Input<boolean>;
            name?: pulumi.Input<string>;
            runtimeResolution?: pulumi.Input<boolean>;
            template?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesCephfs>;
            cinder?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesCinder>;
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesConfigMap>;
            csi?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesEmptyDir>;
            fc?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesFc>;
            flexVolume?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesIscsi>;
            name: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesProjected>;
            quobyte?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesScaleIO>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesSecret>;
            storageos?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesVsphereVolume>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName: pulumi.Input<string>;
            diskURI: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName: pulumi.Input<string>;
            shareName: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesCephfs {
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesCinderSecretRef>;
            volumeID: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesCsi {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesDownwardAPIItems>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesEmptyDirSizeLimit>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesEmptyDirSizeLimit {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesFlexVolume {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesFlexVolumeSecretRef>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesGlusterfs {
            endpoints: pulumi.Input<string>;
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesHostPath {
            path: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesIscsiSecretRef>;
            targetPortal: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesNfs {
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesPersistentVolumeClaim {
            claimName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesProjectedSources>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesProjectedSourcesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesProjectedSourcesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesRbd {
            fsType?: pulumi.Input<string>;
            image: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecTemplatesVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTemplatesVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecTtlStrategy {
            secondsAfterCompletion?: pulumi.Input<number>;
            secondsAfterFailure?: pulumi.Input<number>;
            secondsAfterSuccess?: pulumi.Input<number>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumeClaimTemplates {
            apiVersion?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            metadata?: pulumi.Input<{[key: string]: any}>;
            spec?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumeClaimTemplatesSpec>;
            status?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumeClaimTemplatesStatus>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumeClaimTemplatesSpec {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumeClaimTemplatesSpecDataSource>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumeClaimTemplatesSpecResources>;
            selector?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumeClaimTemplatesSpecSelector>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumeClaimTemplatesSpecDataSource {
            apiGroup?: pulumi.Input<string>;
            kind: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumeClaimTemplatesSpecResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumeClaimTemplatesSpecResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumeClaimTemplatesSpecResourcesRequests>}>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumeClaimTemplatesSpecResourcesLimits {
        }

        export interface CronWorkflowSpecWorkflowSpecVolumeClaimTemplatesSpecResourcesRequests {
        }

        export interface CronWorkflowSpecWorkflowSpecVolumeClaimTemplatesSpecSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumeClaimTemplatesSpecSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumeClaimTemplatesSpecSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumeClaimTemplatesStatus {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            capacity?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumeClaimTemplatesStatusCapacity>}>;
            conditions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumeClaimTemplatesStatusConditions>[]>;
            phase?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumeClaimTemplatesStatusCapacity {
        }

        export interface CronWorkflowSpecWorkflowSpecVolumeClaimTemplatesStatusConditions {
            lastProbeTime?: pulumi.Input<string>;
            lastTransitionTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            reason?: pulumi.Input<string>;
            status: pulumi.Input<string>;
            type: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesCephfs>;
            cinder?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesCinder>;
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesConfigMap>;
            csi?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesEmptyDir>;
            fc?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesFc>;
            flexVolume?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesIscsi>;
            name: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesProjected>;
            quobyte?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesScaleIO>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesSecret>;
            storageos?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesVsphereVolume>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName: pulumi.Input<string>;
            diskURI: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName: pulumi.Input<string>;
            shareName: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesCephfs {
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesCinderSecretRef>;
            volumeID: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesCsi {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesDownwardAPIItems>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesEmptyDirSizeLimit>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesEmptyDirSizeLimit {
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesFlexVolume {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesFlexVolumeSecretRef>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesGlusterfs {
            endpoints: pulumi.Input<string>;
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesHostPath {
            path: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesIscsiSecretRef>;
            targetPortal: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesNfs {
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesPersistentVolumeClaim {
            claimName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesProjectedSources>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesProjectedSourcesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesProjectedSourcesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesRbd {
            fsType?: pulumi.Input<string>;
            image: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowSpecWorkflowSpecVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath: pulumi.Input<string>;
        }

        export interface CronWorkflowSpecWorkflowSpecWorkflowTemplateRef {
            clusterScope?: pulumi.Input<boolean>;
            name?: pulumi.Input<string>;
        }

        export interface CronWorkflowStatus {
            active?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowStatusActive>[]>;
            conditions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.CronWorkflowStatusConditions>[]>;
            lastScheduledTime?: pulumi.Input<string>;
        }

        export interface CronWorkflowStatusActive {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
            resourceVersion?: pulumi.Input<string>;
            uid?: pulumi.Input<string>;
        }

        export interface CronWorkflowStatusConditions {
            message?: pulumi.Input<string>;
            status?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface WorkflowEventBindingSpec {
            event: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecEvent>;
            submit?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmit>;
        }

        export interface WorkflowEventBindingSpecEvent {
            selector: pulumi.Input<string>;
        }

        export interface WorkflowEventBindingSpecSubmit {
            arguments?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArguments>;
            workflowTemplateRef: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitWorkflowTemplateRef>;
        }

        export interface WorkflowEventBindingSpecSubmitArguments {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsParameters>[]>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsArchiveTar>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowEventBindingSpecSubmitArgumentsParametersValueFrom>;
        }

        export interface WorkflowEventBindingSpecSubmitArgumentsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowEventBindingSpecSubmitWorkflowTemplateRef {
            clusterScope?: pulumi.Input<boolean>;
            name?: pulumi.Input<string>;
        }

        export interface WorkflowSpec {
            activeDeadlineSeconds?: pulumi.Input<number>;
            affinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinity>;
            arguments?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArguments>;
            artifactRepositoryRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArtifactRepositoryRef>;
            automountServiceAccountToken?: pulumi.Input<boolean>;
            dnsConfig?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecDnsConfig>;
            dnsPolicy?: pulumi.Input<string>;
            entrypoint?: pulumi.Input<string>;
            executor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecExecutor>;
            hostAliases?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecHostAliases>[]>;
            hostNetwork?: pulumi.Input<boolean>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecImagePullSecrets>[]>;
            metrics?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecMetrics>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            onExit?: pulumi.Input<string>;
            parallelism?: pulumi.Input<number>;
            podDisruptionBudget?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecPodDisruptionBudget>;
            podGC?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecPodGC>;
            podPriority?: pulumi.Input<number>;
            podPriorityClassName?: pulumi.Input<string>;
            podSpecPatch?: pulumi.Input<string>;
            priority?: pulumi.Input<number>;
            schedulerName?: pulumi.Input<string>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecSecurityContext>;
            serviceAccountName?: pulumi.Input<string>;
            shutdown?: pulumi.Input<string>;
            suspend?: pulumi.Input<boolean>;
            synchronization?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecSynchronization>;
            templates?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplates>[]>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTolerations>[]>;
            ttlSecondsAfterFinished?: pulumi.Input<number>;
            ttlStrategy?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTtlStrategy>;
            volumeClaimTemplates?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumeClaimTemplates>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumes>[]>;
            workflowTemplateRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecWorkflowTemplateRef>;
        }

        export interface WorkflowSpecAffinity {
            nodeAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityPodAntiAffinity>;
        }

        export interface WorkflowSpecAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface WorkflowSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight: pulumi.Input<number>;
        }

        export interface WorkflowSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface WorkflowSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface WorkflowSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface WorkflowSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface WorkflowSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface WorkflowSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface WorkflowSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface WorkflowSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecArguments {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsParameters>[]>;
        }

        export interface WorkflowSpecArgumentsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowSpecArgumentsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsArchiveTar>;
        }

        export interface WorkflowSpecArgumentsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowSpecArgumentsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowSpecArgumentsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecArgumentsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecArgumentsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowSpecArgumentsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecArgumentsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowSpecArgumentsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecArgumentsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecArgumentsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecArgumentsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowSpecArgumentsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecArgumentsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecArgumentsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecArgumentsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowSpecArgumentsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowSpecArgumentsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecArgumentsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecArgumentsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowSpecArgumentsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecArgumentsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecArgumentsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecArgumentsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecArgumentsParametersValueFrom>;
        }

        export interface WorkflowSpecArgumentsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowSpecArtifactRepositoryRef {
            configMap?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
        }

        export interface WorkflowSpecDnsConfig {
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            options?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecDnsConfigOptions>[]>;
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecDnsConfigOptions {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface WorkflowSpecExecutor {
            serviceAccountName?: pulumi.Input<string>;
        }

        export interface WorkflowSpecHostAliases {
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            ip?: pulumi.Input<string>;
        }

        export interface WorkflowSpecImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowSpecMetrics {
            prometheus: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecMetricsPrometheus>[]>;
        }

        export interface WorkflowSpecMetricsPrometheus {
            counter?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecMetricsPrometheusCounter>;
            gauge?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecMetricsPrometheusGauge>;
            help: pulumi.Input<string>;
            histogram?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecMetricsPrometheusHistogram>;
            labels?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecMetricsPrometheusLabels>[]>;
            name: pulumi.Input<string>;
            when?: pulumi.Input<string>;
        }

        export interface WorkflowSpecMetricsPrometheusCounter {
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecMetricsPrometheusGauge {
            realtime: pulumi.Input<boolean>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecMetricsPrometheusHistogram {
            buckets: pulumi.Input<pulumi.Input<number>[]>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecMetricsPrometheusLabels {
            key: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecPodDisruptionBudget {
            maxUnavailable?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecPodDisruptionBudgetMaxUnavailable>;
            minAvailable?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecPodDisruptionBudgetMinAvailable>;
            selector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecPodDisruptionBudgetSelector>;
        }

        export interface WorkflowSpecPodDisruptionBudgetMaxUnavailable {
        }

        export interface WorkflowSpecPodDisruptionBudgetMinAvailable {
        }

        export interface WorkflowSpecPodDisruptionBudgetSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecPodDisruptionBudgetSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowSpecPodDisruptionBudgetSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecPodGC {
            strategy?: pulumi.Input<string>;
        }

        export interface WorkflowSpecSecurityContext {
            fsGroup?: pulumi.Input<number>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecSecurityContextSeLinuxOptions>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecSecurityContextWindowsOptions>;
        }

        export interface WorkflowSpecSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowSpecSecurityContextSysctls {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowSpecSynchronization {
            mutex?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecSynchronizationMutex>;
            semaphore?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecSynchronizationSemaphore>;
        }

        export interface WorkflowSpecSynchronizationMutex {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowSpecSynchronizationSemaphore {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecSynchronizationSemaphoreConfigMapKeyRef>;
        }

        export interface WorkflowSpecSynchronizationSemaphoreConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplates {
            activeDeadlineSeconds?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesActiveDeadlineSeconds>;
            affinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinity>;
            archiveLocation?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArchiveLocation>;
            arguments?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArguments>;
            automountServiceAccountToken?: pulumi.Input<boolean>;
            container?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainer>;
            daemon?: pulumi.Input<boolean>;
            dag?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDag>;
            executor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesExecutor>;
            hostAliases?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesHostAliases>[]>;
            initContainers?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainers>[]>;
            inputs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputs>;
            memoize?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesMemoize>;
            metadata?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesMetadata>;
            metrics?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesMetrics>;
            name: pulumi.Input<string>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            outputs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputs>;
            parallelism?: pulumi.Input<number>;
            podSpecPatch?: pulumi.Input<string>;
            priority?: pulumi.Input<number>;
            priorityClassName?: pulumi.Input<string>;
            resource?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesResource>;
            resubmitPendingPods?: pulumi.Input<boolean>;
            retryStrategy?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesRetryStrategy>;
            schedulerName?: pulumi.Input<string>;
            script?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScript>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSecurityContext>;
            serviceAccountName?: pulumi.Input<string>;
            sidecars?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecars>[]>;
            steps?: pulumi.Input<pulumi.Input<any[]>[]>;
            suspend?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSuspend>;
            synchronization?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSynchronization>;
            template?: pulumi.Input<string>;
            templateRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesTemplateRef>;
            timeout?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesTolerations>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumes>[]>;
        }

        export interface WorkflowSpecTemplatesActiveDeadlineSeconds {
        }

        export interface WorkflowSpecTemplatesAffinity {
            nodeAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityPodAntiAffinity>;
        }

        export interface WorkflowSpecTemplatesAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface WorkflowSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight: pulumi.Input<number>;
        }

        export interface WorkflowSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface WorkflowSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface WorkflowSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface WorkflowSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface WorkflowSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface WorkflowSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface WorkflowSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface WorkflowSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesArchiveLocation {
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArchiveLocationArtifactory>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArchiveLocationGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArchiveLocationGit>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArchiveLocationHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArchiveLocationHttp>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArchiveLocationOss>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArchiveLocationRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArchiveLocationS3>;
        }

        export interface WorkflowSpecTemplatesArchiveLocationArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArchiveLocationArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArchiveLocationArtifactoryUsernameSecret>;
        }

        export interface WorkflowSpecTemplatesArchiveLocationArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArchiveLocationArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArchiveLocationGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArchiveLocationGcsServiceAccountKeySecret>;
        }

        export interface WorkflowSpecTemplatesArchiveLocationGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArchiveLocationGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArchiveLocationGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArchiveLocationGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArchiveLocationGitUsernameSecret>;
        }

        export interface WorkflowSpecTemplatesArchiveLocationGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArchiveLocationGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArchiveLocationGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArchiveLocationHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArchiveLocationHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArchiveLocationHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArchiveLocationHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesArchiveLocationHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArchiveLocationHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArchiveLocationHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArchiveLocationHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesArchiveLocationOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArchiveLocationOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArchiveLocationOssSecretKeySecret>;
        }

        export interface WorkflowSpecTemplatesArchiveLocationOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArchiveLocationOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArchiveLocationRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesArchiveLocationS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArchiveLocationS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArchiveLocationS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArchiveLocationS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArchiveLocationS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArguments {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsParameters>[]>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsArchiveTar>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArgumentsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesArgumentsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesArgumentsParametersValueFrom>;
        }

        export interface WorkflowSpecTemplatesArgumentsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowSpecTemplatesContainer {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerEnvFrom>[]>;
            image: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerLivenessProbe>;
            name?: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerSecurityContext>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesContainerEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerEnvValueFrom>;
        }

        export interface WorkflowSpecTemplatesContainerEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerEnvFromSecretRef>;
        }

        export interface WorkflowSpecTemplatesContainerEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesContainerEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesContainerEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerEnvValueFromSecretKeyRef>;
        }

        export interface WorkflowSpecTemplatesContainerEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesContainerEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesContainerEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesContainerEnvValueFromResourceFieldRefDivisor {
        }

        export interface WorkflowSpecTemplatesContainerEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesContainerLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerLifecyclePreStop>;
        }

        export interface WorkflowSpecTemplatesContainerLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerLifecyclePostStartTcpSocket>;
        }

        export interface WorkflowSpecTemplatesContainerLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesContainerLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesContainerLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesContainerLifecyclePostStartHttpGetPort {
        }

        export interface WorkflowSpecTemplatesContainerLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerLifecyclePostStartTcpSocketPort>;
        }

        export interface WorkflowSpecTemplatesContainerLifecyclePostStartTcpSocketPort {
        }

        export interface WorkflowSpecTemplatesContainerLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerLifecyclePreStopTcpSocket>;
        }

        export interface WorkflowSpecTemplatesContainerLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesContainerLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesContainerLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesContainerLifecyclePreStopHttpGetPort {
        }

        export interface WorkflowSpecTemplatesContainerLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerLifecyclePreStopTcpSocketPort>;
        }

        export interface WorkflowSpecTemplatesContainerLifecyclePreStopTcpSocketPort {
        }

        export interface WorkflowSpecTemplatesContainerLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowSpecTemplatesContainerLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesContainerLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesContainerLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesContainerLivenessProbeHttpGetPort {
        }

        export interface WorkflowSpecTemplatesContainerLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerLivenessProbeTcpSocketPort>;
        }

        export interface WorkflowSpecTemplatesContainerLivenessProbeTcpSocketPort {
        }

        export interface WorkflowSpecTemplatesContainerPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesContainerReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowSpecTemplatesContainerReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesContainerReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesContainerReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesContainerReadinessProbeHttpGetPort {
        }

        export interface WorkflowSpecTemplatesContainerReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerReadinessProbeTcpSocketPort>;
        }

        export interface WorkflowSpecTemplatesContainerReadinessProbeTcpSocketPort {
        }

        export interface WorkflowSpecTemplatesContainerResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerResourcesRequests>}>;
        }

        export interface WorkflowSpecTemplatesContainerResourcesLimits {
        }

        export interface WorkflowSpecTemplatesContainerResourcesRequests {
        }

        export interface WorkflowSpecTemplatesContainerSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerSecurityContextWindowsOptions>;
        }

        export interface WorkflowSpecTemplatesContainerSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesContainerSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesContainerSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesContainerStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowSpecTemplatesContainerStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesContainerStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesContainerStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesContainerStartupProbeHttpGetPort {
        }

        export interface WorkflowSpecTemplatesContainerStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesContainerStartupProbeTcpSocketPort>;
        }

        export interface WorkflowSpecTemplatesContainerStartupProbeTcpSocketPort {
        }

        export interface WorkflowSpecTemplatesContainerVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesContainerVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesDag {
            failFast?: pulumi.Input<boolean>;
            target?: pulumi.Input<string>;
            tasks: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasks>[]>;
        }

        export interface WorkflowSpecTemplatesDagTasks {
            arguments?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArguments>;
            continueOn?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksContinueOn>;
            dependencies?: pulumi.Input<pulumi.Input<string>[]>;
            depends?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            onExit?: pulumi.Input<string>;
            template: pulumi.Input<string>;
            templateRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksTemplateRef>;
            when?: pulumi.Input<string>;
            withItems?: pulumi.Input<pulumi.Input<{[key: string]: any}>[]>;
            withParam?: pulumi.Input<string>;
            withSequence?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksWithSequence>;
        }

        export interface WorkflowSpecTemplatesDagTasksArguments {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsParameters>[]>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsArchiveTar>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksArgumentsParametersValueFrom>;
        }

        export interface WorkflowSpecTemplatesDagTasksArgumentsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowSpecTemplatesDagTasksContinueOn {
            error?: pulumi.Input<boolean>;
            failed?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesDagTasksTemplateRef {
            clusterScope?: pulumi.Input<boolean>;
            name?: pulumi.Input<string>;
            runtimeResolution?: pulumi.Input<boolean>;
            template?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesDagTasksWithSequence {
            count?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksWithSequenceCount>;
            end?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksWithSequenceEnd>;
            format?: pulumi.Input<string>;
            start?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesDagTasksWithSequenceStart>;
        }

        export interface WorkflowSpecTemplatesDagTasksWithSequenceCount {
        }

        export interface WorkflowSpecTemplatesDagTasksWithSequenceEnd {
        }

        export interface WorkflowSpecTemplatesDagTasksWithSequenceStart {
        }

        export interface WorkflowSpecTemplatesExecutor {
            serviceAccountName?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesHostAliases {
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            ip?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInitContainers {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersLivenessProbe>;
            mirrorVolumeMounts?: pulumi.Input<boolean>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersSecurityContext>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInitContainersEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersEnvValueFrom>;
        }

        export interface WorkflowSpecTemplatesInitContainersEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersEnvFromSecretRef>;
        }

        export interface WorkflowSpecTemplatesInitContainersEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesInitContainersEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesInitContainersEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersEnvValueFromSecretKeyRef>;
        }

        export interface WorkflowSpecTemplatesInitContainersEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesInitContainersEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInitContainersEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInitContainersEnvValueFromResourceFieldRefDivisor {
        }

        export interface WorkflowSpecTemplatesInitContainersEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesInitContainersLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersLifecyclePreStop>;
        }

        export interface WorkflowSpecTemplatesInitContainersLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersLifecyclePostStartTcpSocket>;
        }

        export interface WorkflowSpecTemplatesInitContainersLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesInitContainersLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInitContainersLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInitContainersLifecyclePostStartHttpGetPort {
        }

        export interface WorkflowSpecTemplatesInitContainersLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersLifecyclePostStartTcpSocketPort>;
        }

        export interface WorkflowSpecTemplatesInitContainersLifecyclePostStartTcpSocketPort {
        }

        export interface WorkflowSpecTemplatesInitContainersLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersLifecyclePreStopTcpSocket>;
        }

        export interface WorkflowSpecTemplatesInitContainersLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesInitContainersLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInitContainersLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInitContainersLifecyclePreStopHttpGetPort {
        }

        export interface WorkflowSpecTemplatesInitContainersLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersLifecyclePreStopTcpSocketPort>;
        }

        export interface WorkflowSpecTemplatesInitContainersLifecyclePreStopTcpSocketPort {
        }

        export interface WorkflowSpecTemplatesInitContainersLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowSpecTemplatesInitContainersLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesInitContainersLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInitContainersLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInitContainersLivenessProbeHttpGetPort {
        }

        export interface WorkflowSpecTemplatesInitContainersLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersLivenessProbeTcpSocketPort>;
        }

        export interface WorkflowSpecTemplatesInitContainersLivenessProbeTcpSocketPort {
        }

        export interface WorkflowSpecTemplatesInitContainersPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInitContainersReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowSpecTemplatesInitContainersReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesInitContainersReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInitContainersReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInitContainersReadinessProbeHttpGetPort {
        }

        export interface WorkflowSpecTemplatesInitContainersReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersReadinessProbeTcpSocketPort>;
        }

        export interface WorkflowSpecTemplatesInitContainersReadinessProbeTcpSocketPort {
        }

        export interface WorkflowSpecTemplatesInitContainersResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersResourcesRequests>}>;
        }

        export interface WorkflowSpecTemplatesInitContainersResourcesLimits {
        }

        export interface WorkflowSpecTemplatesInitContainersResourcesRequests {
        }

        export interface WorkflowSpecTemplatesInitContainersSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersSecurityContextWindowsOptions>;
        }

        export interface WorkflowSpecTemplatesInitContainersSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesInitContainersSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInitContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInitContainersStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowSpecTemplatesInitContainersStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesInitContainersStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInitContainersStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInitContainersStartupProbeHttpGetPort {
        }

        export interface WorkflowSpecTemplatesInitContainersStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInitContainersStartupProbeTcpSocketPort>;
        }

        export interface WorkflowSpecTemplatesInitContainersStartupProbeTcpSocketPort {
        }

        export interface WorkflowSpecTemplatesInitContainersVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInitContainersVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInputs {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsParameters>[]>;
        }

        export interface WorkflowSpecTemplatesInputsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsArchiveTar>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesInputsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesInputsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesInputsParametersValueFrom>;
        }

        export interface WorkflowSpecTemplatesInputsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowSpecTemplatesMemoize {
            cache: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesMemoizeCache>;
            key: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesMemoizeCache {
            configMap: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesMemoizeCacheConfigMap>;
        }

        export interface WorkflowSpecTemplatesMemoizeCacheConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowSpecTemplatesMetrics {
            prometheus: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesMetricsPrometheus>[]>;
        }

        export interface WorkflowSpecTemplatesMetricsPrometheus {
            counter?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesMetricsPrometheusCounter>;
            gauge?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesMetricsPrometheusGauge>;
            help: pulumi.Input<string>;
            histogram?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesMetricsPrometheusHistogram>;
            labels?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesMetricsPrometheusLabels>[]>;
            name: pulumi.Input<string>;
            when?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesMetricsPrometheusCounter {
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesMetricsPrometheusGauge {
            realtime: pulumi.Input<boolean>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesMetricsPrometheusHistogram {
            buckets: pulumi.Input<pulumi.Input<number>[]>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesMetricsPrometheusLabels {
            key: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesOutputs {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifacts>[]>;
            exitCode?: pulumi.Input<string>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsParameters>[]>;
            result?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsArchiveTar>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesOutputsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesOutputsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesOutputsParametersValueFrom>;
        }

        export interface WorkflowSpecTemplatesOutputsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowSpecTemplatesResource {
            action: pulumi.Input<string>;
            failureCondition?: pulumi.Input<string>;
            flags?: pulumi.Input<pulumi.Input<string>[]>;
            manifest?: pulumi.Input<string>;
            mergeStrategy?: pulumi.Input<string>;
            setOwnerReference?: pulumi.Input<boolean>;
            successCondition?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesRetryStrategy {
            backoff?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesRetryStrategyBackoff>;
            limit?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesRetryStrategyLimit>;
            retryPolicy?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesRetryStrategyBackoff {
            duration?: pulumi.Input<string>;
            factor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesRetryStrategyBackoffFactor>;
            maxDuration?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesRetryStrategyBackoffFactor {
        }

        export interface WorkflowSpecTemplatesRetryStrategyLimit {
        }

        export interface WorkflowSpecTemplatesScript {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptEnvFrom>[]>;
            image: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptLivenessProbe>;
            name?: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptSecurityContext>;
            source: pulumi.Input<string>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesScriptEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptEnvValueFrom>;
        }

        export interface WorkflowSpecTemplatesScriptEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptEnvFromSecretRef>;
        }

        export interface WorkflowSpecTemplatesScriptEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesScriptEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesScriptEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptEnvValueFromSecretKeyRef>;
        }

        export interface WorkflowSpecTemplatesScriptEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesScriptEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesScriptEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesScriptEnvValueFromResourceFieldRefDivisor {
        }

        export interface WorkflowSpecTemplatesScriptEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesScriptLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptLifecyclePreStop>;
        }

        export interface WorkflowSpecTemplatesScriptLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptLifecyclePostStartTcpSocket>;
        }

        export interface WorkflowSpecTemplatesScriptLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesScriptLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesScriptLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesScriptLifecyclePostStartHttpGetPort {
        }

        export interface WorkflowSpecTemplatesScriptLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptLifecyclePostStartTcpSocketPort>;
        }

        export interface WorkflowSpecTemplatesScriptLifecyclePostStartTcpSocketPort {
        }

        export interface WorkflowSpecTemplatesScriptLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptLifecyclePreStopTcpSocket>;
        }

        export interface WorkflowSpecTemplatesScriptLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesScriptLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesScriptLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesScriptLifecyclePreStopHttpGetPort {
        }

        export interface WorkflowSpecTemplatesScriptLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptLifecyclePreStopTcpSocketPort>;
        }

        export interface WorkflowSpecTemplatesScriptLifecyclePreStopTcpSocketPort {
        }

        export interface WorkflowSpecTemplatesScriptLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowSpecTemplatesScriptLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesScriptLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesScriptLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesScriptLivenessProbeHttpGetPort {
        }

        export interface WorkflowSpecTemplatesScriptLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptLivenessProbeTcpSocketPort>;
        }

        export interface WorkflowSpecTemplatesScriptLivenessProbeTcpSocketPort {
        }

        export interface WorkflowSpecTemplatesScriptPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesScriptReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowSpecTemplatesScriptReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesScriptReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesScriptReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesScriptReadinessProbeHttpGetPort {
        }

        export interface WorkflowSpecTemplatesScriptReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptReadinessProbeTcpSocketPort>;
        }

        export interface WorkflowSpecTemplatesScriptReadinessProbeTcpSocketPort {
        }

        export interface WorkflowSpecTemplatesScriptResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptResourcesRequests>}>;
        }

        export interface WorkflowSpecTemplatesScriptResourcesLimits {
        }

        export interface WorkflowSpecTemplatesScriptResourcesRequests {
        }

        export interface WorkflowSpecTemplatesScriptSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptSecurityContextWindowsOptions>;
        }

        export interface WorkflowSpecTemplatesScriptSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesScriptSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesScriptSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesScriptStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowSpecTemplatesScriptStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesScriptStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesScriptStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesScriptStartupProbeHttpGetPort {
        }

        export interface WorkflowSpecTemplatesScriptStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesScriptStartupProbeTcpSocketPort>;
        }

        export interface WorkflowSpecTemplatesScriptStartupProbeTcpSocketPort {
        }

        export interface WorkflowSpecTemplatesScriptVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesScriptVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSecurityContext {
            fsGroup?: pulumi.Input<number>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSecurityContextSeLinuxOptions>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSecurityContextWindowsOptions>;
        }

        export interface WorkflowSpecTemplatesSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSecurityContextSysctls {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSidecars {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsLivenessProbe>;
            mirrorVolumeMounts?: pulumi.Input<boolean>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsSecurityContext>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSidecarsEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsEnvValueFrom>;
        }

        export interface WorkflowSpecTemplatesSidecarsEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsEnvFromSecretRef>;
        }

        export interface WorkflowSpecTemplatesSidecarsEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesSidecarsEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesSidecarsEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsEnvValueFromSecretKeyRef>;
        }

        export interface WorkflowSpecTemplatesSidecarsEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesSidecarsEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSidecarsEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSidecarsEnvValueFromResourceFieldRefDivisor {
        }

        export interface WorkflowSpecTemplatesSidecarsEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesSidecarsLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsLifecyclePreStop>;
        }

        export interface WorkflowSpecTemplatesSidecarsLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsLifecyclePostStartTcpSocket>;
        }

        export interface WorkflowSpecTemplatesSidecarsLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesSidecarsLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSidecarsLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSidecarsLifecyclePostStartHttpGetPort {
        }

        export interface WorkflowSpecTemplatesSidecarsLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsLifecyclePostStartTcpSocketPort>;
        }

        export interface WorkflowSpecTemplatesSidecarsLifecyclePostStartTcpSocketPort {
        }

        export interface WorkflowSpecTemplatesSidecarsLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsLifecyclePreStopTcpSocket>;
        }

        export interface WorkflowSpecTemplatesSidecarsLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesSidecarsLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSidecarsLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSidecarsLifecyclePreStopHttpGetPort {
        }

        export interface WorkflowSpecTemplatesSidecarsLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsLifecyclePreStopTcpSocketPort>;
        }

        export interface WorkflowSpecTemplatesSidecarsLifecyclePreStopTcpSocketPort {
        }

        export interface WorkflowSpecTemplatesSidecarsLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowSpecTemplatesSidecarsLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesSidecarsLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSidecarsLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSidecarsLivenessProbeHttpGetPort {
        }

        export interface WorkflowSpecTemplatesSidecarsLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsLivenessProbeTcpSocketPort>;
        }

        export interface WorkflowSpecTemplatesSidecarsLivenessProbeTcpSocketPort {
        }

        export interface WorkflowSpecTemplatesSidecarsPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSidecarsReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowSpecTemplatesSidecarsReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesSidecarsReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSidecarsReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSidecarsReadinessProbeHttpGetPort {
        }

        export interface WorkflowSpecTemplatesSidecarsReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsReadinessProbeTcpSocketPort>;
        }

        export interface WorkflowSpecTemplatesSidecarsReadinessProbeTcpSocketPort {
        }

        export interface WorkflowSpecTemplatesSidecarsResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsResourcesRequests>}>;
        }

        export interface WorkflowSpecTemplatesSidecarsResourcesLimits {
        }

        export interface WorkflowSpecTemplatesSidecarsResourcesRequests {
        }

        export interface WorkflowSpecTemplatesSidecarsSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsSecurityContextWindowsOptions>;
        }

        export interface WorkflowSpecTemplatesSidecarsSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesSidecarsSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSidecarsSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSidecarsStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowSpecTemplatesSidecarsStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesSidecarsStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSidecarsStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSidecarsStartupProbeHttpGetPort {
        }

        export interface WorkflowSpecTemplatesSidecarsStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSidecarsStartupProbeTcpSocketPort>;
        }

        export interface WorkflowSpecTemplatesSidecarsStartupProbeTcpSocketPort {
        }

        export interface WorkflowSpecTemplatesSidecarsVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSidecarsVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSuspend {
            duration?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSynchronization {
            mutex?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSynchronizationMutex>;
            semaphore?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSynchronizationSemaphore>;
        }

        export interface WorkflowSpecTemplatesSynchronizationMutex {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesSynchronizationSemaphore {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesSynchronizationSemaphoreConfigMapKeyRef>;
        }

        export interface WorkflowSpecTemplatesSynchronizationSemaphoreConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesTemplateRef {
            clusterScope?: pulumi.Input<boolean>;
            name?: pulumi.Input<string>;
            runtimeResolution?: pulumi.Input<boolean>;
            template?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesCephfs>;
            cinder?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesCinder>;
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesConfigMap>;
            csi?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesEmptyDir>;
            fc?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesFc>;
            flexVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesIscsi>;
            name: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesProjected>;
            quobyte?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesScaleIO>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesSecret>;
            storageos?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesVsphereVolume>;
        }

        export interface WorkflowSpecTemplatesVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName: pulumi.Input<string>;
            diskURI: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName: pulumi.Input<string>;
            shareName: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesCephfs {
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesCinderSecretRef>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesVolumesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesCsi {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowSpecTemplatesVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesDownwardAPIItems>[]>;
        }

        export interface WorkflowSpecTemplatesVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface WorkflowSpecTemplatesVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface WorkflowSpecTemplatesVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesEmptyDirSizeLimit>;
        }

        export interface WorkflowSpecTemplatesVolumesEmptyDirSizeLimit {
        }

        export interface WorkflowSpecTemplatesVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecTemplatesVolumesFlexVolume {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesFlexVolumeSecretRef>;
        }

        export interface WorkflowSpecTemplatesVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesGlusterfs {
            endpoints: pulumi.Input<string>;
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesVolumesHostPath {
            path: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesIscsiSecretRef>;
            targetPortal: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesNfs {
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesPersistentVolumeClaim {
            claimName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesProjectedSources>[]>;
        }

        export interface WorkflowSpecTemplatesVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface WorkflowSpecTemplatesVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesVolumesProjectedSourcesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface WorkflowSpecTemplatesVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface WorkflowSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface WorkflowSpecTemplatesVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecTemplatesVolumesProjectedSourcesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesRbd {
            fsType?: pulumi.Input<string>;
            image: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecTemplatesVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTemplatesVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath: pulumi.Input<string>;
        }

        export interface WorkflowSpecTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface WorkflowSpecTtlStrategy {
            secondsAfterCompletion?: pulumi.Input<number>;
            secondsAfterFailure?: pulumi.Input<number>;
            secondsAfterSuccess?: pulumi.Input<number>;
        }

        export interface WorkflowSpecVolumeClaimTemplates {
            apiVersion?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            metadata?: pulumi.Input<{[key: string]: any}>;
            spec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumeClaimTemplatesSpec>;
            status?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumeClaimTemplatesStatus>;
        }

        export interface WorkflowSpecVolumeClaimTemplatesSpec {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumeClaimTemplatesSpecDataSource>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumeClaimTemplatesSpecResources>;
            selector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumeClaimTemplatesSpecSelector>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumeClaimTemplatesSpecDataSource {
            apiGroup?: pulumi.Input<string>;
            kind: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumeClaimTemplatesSpecResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumeClaimTemplatesSpecResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumeClaimTemplatesSpecResourcesRequests>}>;
        }

        export interface WorkflowSpecVolumeClaimTemplatesSpecResourcesLimits {
        }

        export interface WorkflowSpecVolumeClaimTemplatesSpecResourcesRequests {
        }

        export interface WorkflowSpecVolumeClaimTemplatesSpecSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumeClaimTemplatesSpecSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowSpecVolumeClaimTemplatesSpecSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecVolumeClaimTemplatesStatus {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            capacity?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumeClaimTemplatesStatusCapacity>}>;
            conditions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumeClaimTemplatesStatusConditions>[]>;
            phase?: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumeClaimTemplatesStatusCapacity {
        }

        export interface WorkflowSpecVolumeClaimTemplatesStatusConditions {
            lastProbeTime?: pulumi.Input<string>;
            lastTransitionTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            reason?: pulumi.Input<string>;
            status: pulumi.Input<string>;
            type: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesCephfs>;
            cinder?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesCinder>;
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesConfigMap>;
            csi?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesEmptyDir>;
            fc?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesFc>;
            flexVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesIscsi>;
            name: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesProjected>;
            quobyte?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesScaleIO>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesSecret>;
            storageos?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesVsphereVolume>;
        }

        export interface WorkflowSpecVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName: pulumi.Input<string>;
            diskURI: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName: pulumi.Input<string>;
            shareName: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesCephfs {
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesCinderSecretRef>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecVolumesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesCsi {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowSpecVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesDownwardAPIItems>[]>;
        }

        export interface WorkflowSpecVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface WorkflowSpecVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface WorkflowSpecVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesEmptyDirSizeLimit>;
        }

        export interface WorkflowSpecVolumesEmptyDirSizeLimit {
        }

        export interface WorkflowSpecVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowSpecVolumesFlexVolume {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesFlexVolumeSecretRef>;
        }

        export interface WorkflowSpecVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesGlusterfs {
            endpoints: pulumi.Input<string>;
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecVolumesHostPath {
            path: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesIscsiSecretRef>;
            targetPortal: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesNfs {
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesPersistentVolumeClaim {
            claimName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesProjectedSources>[]>;
        }

        export interface WorkflowSpecVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface WorkflowSpecVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecVolumesProjectedSourcesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface WorkflowSpecVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface WorkflowSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface WorkflowSpecVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowSpecVolumesProjectedSourcesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesRbd {
            fsType?: pulumi.Input<string>;
            image: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowSpecVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowSpecVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath: pulumi.Input<string>;
        }

        export interface WorkflowSpecWorkflowTemplateRef {
            clusterScope?: pulumi.Input<boolean>;
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatus {
            compressedNodes?: pulumi.Input<string>;
            conditions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusConditions>[]>;
            finishedAt?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            nodes?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodes>}>;
            offloadNodeStatusVersion?: pulumi.Input<string>;
            outputs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputs>;
            persistentVolumeClaims?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaims>[]>;
            phase?: pulumi.Input<string>;
            resourcesDuration?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
            startedAt?: pulumi.Input<string>;
            storedTemplates?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplates>}>;
            storedWorkflowTemplateSpec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpec>;
            synchronization?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusSynchronization>;
        }

        export interface WorkflowStatusConditions {
            message?: pulumi.Input<string>;
            status?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface WorkflowStatusNodes {
            boundaryID?: pulumi.Input<string>;
            children?: pulumi.Input<pulumi.Input<string>[]>;
            daemoned?: pulumi.Input<boolean>;
            displayName?: pulumi.Input<string>;
            finishedAt?: pulumi.Input<string>;
            hostNodeName?: pulumi.Input<string>;
            id: pulumi.Input<string>;
            inputs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputs>;
            memoizationStatus?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesMemoizationStatus>;
            message?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            outboundNodes?: pulumi.Input<pulumi.Input<string>[]>;
            outputs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputs>;
            phase?: pulumi.Input<string>;
            podIP?: pulumi.Input<string>;
            resourcesDuration?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
            startedAt?: pulumi.Input<string>;
            storedTemplateID?: pulumi.Input<string>;
            templateName?: pulumi.Input<string>;
            templateRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesTemplateRef>;
            templateScope?: pulumi.Input<string>;
            type: pulumi.Input<string>;
            workflowTemplateName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusNodesInputs {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsParameters>[]>;
        }

        export interface WorkflowStatusNodesInputsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowStatusNodesInputsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsArchiveTar>;
        }

        export interface WorkflowStatusNodesInputsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowStatusNodesInputsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowStatusNodesInputsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesInputsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesInputsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowStatusNodesInputsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesInputsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowStatusNodesInputsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesInputsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesInputsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesInputsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusNodesInputsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesInputsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesInputsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesInputsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowStatusNodesInputsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowStatusNodesInputsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesInputsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesInputsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowStatusNodesInputsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesInputsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesInputsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesInputsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesInputsParametersValueFrom>;
        }

        export interface WorkflowStatusNodesInputsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowStatusNodesMemoizationStatus {
            cacheName: pulumi.Input<string>;
            hit: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
        }

        export interface WorkflowStatusNodesOutputs {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifacts>[]>;
            exitCode?: pulumi.Input<string>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsParameters>[]>;
            result?: pulumi.Input<string>;
        }

        export interface WorkflowStatusNodesOutputsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsArchiveTar>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesOutputsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusNodesOutputsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusNodesOutputsParametersValueFrom>;
        }

        export interface WorkflowStatusNodesOutputsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowStatusNodesTemplateRef {
            clusterScope?: pulumi.Input<boolean>;
            name?: pulumi.Input<string>;
            runtimeResolution?: pulumi.Input<boolean>;
            template?: pulumi.Input<string>;
        }

        export interface WorkflowStatusOutputs {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifacts>[]>;
            exitCode?: pulumi.Input<string>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsParameters>[]>;
            result?: pulumi.Input<string>;
        }

        export interface WorkflowStatusOutputsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowStatusOutputsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsArchiveTar>;
        }

        export interface WorkflowStatusOutputsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowStatusOutputsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowStatusOutputsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusOutputsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusOutputsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowStatusOutputsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusOutputsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowStatusOutputsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusOutputsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusOutputsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusOutputsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusOutputsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusOutputsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusOutputsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusOutputsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowStatusOutputsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowStatusOutputsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusOutputsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusOutputsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowStatusOutputsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusOutputsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusOutputsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusOutputsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusOutputsParametersValueFrom>;
        }

        export interface WorkflowStatusOutputsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowStatusPersistentVolumeClaims {
            awsElasticBlockStore?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsAzureDisk>;
            azureFile?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsAzureFile>;
            cephfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsCephfs>;
            cinder?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsCinder>;
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsConfigMap>;
            csi?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsCsi>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsEmptyDir>;
            fc?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsFc>;
            flexVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsFlexVolume>;
            flocker?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsGitRepo>;
            glusterfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsGlusterfs>;
            hostPath?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsHostPath>;
            iscsi?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsIscsi>;
            name: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsPortworxVolume>;
            projected?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsProjected>;
            quobyte?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsQuobyte>;
            rbd?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsRbd>;
            scaleIO?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsScaleIO>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsSecret>;
            storageos?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsStorageos>;
            vsphereVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsVsphereVolume>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName: pulumi.Input<string>;
            diskURI: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName: pulumi.Input<string>;
            shareName: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsCephfs {
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsCinderSecretRef>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsCsi {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsDownwardAPIItems>[]>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsDownwardAPIItemsResourceFieldRef>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface WorkflowStatusPersistentVolumeClaimsEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsEmptyDirSizeLimit>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsEmptyDirSizeLimit {
        }

        export interface WorkflowStatusPersistentVolumeClaimsFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsFlexVolume {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsFlexVolumeSecretRef>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsGitRepo {
            directory?: pulumi.Input<string>;
            repository: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsGlusterfs {
            endpoints: pulumi.Input<string>;
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsHostPath {
            path: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsIscsiSecretRef>;
            targetPortal: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsNfs {
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsPersistentVolumeClaim {
            claimName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsProjected {
            defaultMode?: pulumi.Input<number>;
            sources: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsProjectedSources>[]>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsProjectedSources {
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsProjectedSourcesServiceAccountToken>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsProjectedSourcesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface WorkflowStatusPersistentVolumeClaimsProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsProjectedSourcesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsRbd {
            fsType?: pulumi.Input<string>;
            image: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsScaleIO {
            fsType?: pulumi.Input<string>;
            gateway: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusPersistentVolumeClaimsStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusPersistentVolumeClaimsVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplates {
            activeDeadlineSeconds?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesActiveDeadlineSeconds>;
            affinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinity>;
            archiveLocation?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArchiveLocation>;
            arguments?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArguments>;
            automountServiceAccountToken?: pulumi.Input<boolean>;
            container?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainer>;
            daemon?: pulumi.Input<boolean>;
            dag?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDag>;
            executor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesExecutor>;
            hostAliases?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesHostAliases>[]>;
            initContainers?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainers>[]>;
            inputs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputs>;
            memoize?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesMemoize>;
            metadata?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesMetadata>;
            metrics?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesMetrics>;
            name: pulumi.Input<string>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            outputs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputs>;
            parallelism?: pulumi.Input<number>;
            podSpecPatch?: pulumi.Input<string>;
            priority?: pulumi.Input<number>;
            priorityClassName?: pulumi.Input<string>;
            resource?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesResource>;
            resubmitPendingPods?: pulumi.Input<boolean>;
            retryStrategy?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesRetryStrategy>;
            schedulerName?: pulumi.Input<string>;
            script?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScript>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSecurityContext>;
            serviceAccountName?: pulumi.Input<string>;
            sidecars?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecars>[]>;
            steps?: pulumi.Input<pulumi.Input<any[]>[]>;
            suspend?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSuspend>;
            synchronization?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSynchronization>;
            template?: pulumi.Input<string>;
            templateRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesTemplateRef>;
            timeout?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesTolerations>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumes>[]>;
        }

        export interface WorkflowStatusStoredTemplatesActiveDeadlineSeconds {
        }

        export interface WorkflowStatusStoredTemplatesAffinity {
            nodeAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityPodAntiAffinity>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowStatusStoredTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesArchiveLocation {
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArchiveLocationArtifactory>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArchiveLocationGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArchiveLocationGit>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArchiveLocationHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArchiveLocationHttp>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArchiveLocationOss>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArchiveLocationRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArchiveLocationS3>;
        }

        export interface WorkflowStatusStoredTemplatesArchiveLocationArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArchiveLocationArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArchiveLocationArtifactoryUsernameSecret>;
        }

        export interface WorkflowStatusStoredTemplatesArchiveLocationArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArchiveLocationArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArchiveLocationGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArchiveLocationGcsServiceAccountKeySecret>;
        }

        export interface WorkflowStatusStoredTemplatesArchiveLocationGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArchiveLocationGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArchiveLocationGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArchiveLocationGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArchiveLocationGitUsernameSecret>;
        }

        export interface WorkflowStatusStoredTemplatesArchiveLocationGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArchiveLocationGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArchiveLocationGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArchiveLocationHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArchiveLocationHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArchiveLocationHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArchiveLocationHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesArchiveLocationHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArchiveLocationHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArchiveLocationHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArchiveLocationHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesArchiveLocationOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArchiveLocationOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArchiveLocationOssSecretKeySecret>;
        }

        export interface WorkflowStatusStoredTemplatesArchiveLocationOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArchiveLocationOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArchiveLocationRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesArchiveLocationS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArchiveLocationS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArchiveLocationS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArchiveLocationS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArchiveLocationS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArguments {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsParameters>[]>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsArchiveTar>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesArgumentsParametersValueFrom>;
        }

        export interface WorkflowStatusStoredTemplatesArgumentsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowStatusStoredTemplatesContainer {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerLivenessProbe>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerSecurityContext>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesContainerEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerEnvValueFrom>;
        }

        export interface WorkflowStatusStoredTemplatesContainerEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerEnvFromSecretRef>;
        }

        export interface WorkflowStatusStoredTemplatesContainerEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesContainerEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesContainerEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerEnvValueFromSecretKeyRef>;
        }

        export interface WorkflowStatusStoredTemplatesContainerEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesContainerEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesContainerEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesContainerEnvValueFromResourceFieldRefDivisor {
        }

        export interface WorkflowStatusStoredTemplatesContainerEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesContainerLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerLifecyclePreStop>;
        }

        export interface WorkflowStatusStoredTemplatesContainerLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerLifecyclePostStartTcpSocket>;
        }

        export interface WorkflowStatusStoredTemplatesContainerLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesContainerLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesContainerLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesContainerLifecyclePostStartHttpGetPort {
        }

        export interface WorkflowStatusStoredTemplatesContainerLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerLifecyclePostStartTcpSocketPort>;
        }

        export interface WorkflowStatusStoredTemplatesContainerLifecyclePostStartTcpSocketPort {
        }

        export interface WorkflowStatusStoredTemplatesContainerLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerLifecyclePreStopTcpSocket>;
        }

        export interface WorkflowStatusStoredTemplatesContainerLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesContainerLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesContainerLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesContainerLifecyclePreStopHttpGetPort {
        }

        export interface WorkflowStatusStoredTemplatesContainerLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerLifecyclePreStopTcpSocketPort>;
        }

        export interface WorkflowStatusStoredTemplatesContainerLifecyclePreStopTcpSocketPort {
        }

        export interface WorkflowStatusStoredTemplatesContainerLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredTemplatesContainerLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesContainerLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesContainerLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesContainerLivenessProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredTemplatesContainerLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerLivenessProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredTemplatesContainerLivenessProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredTemplatesContainerPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesContainerReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredTemplatesContainerReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesContainerReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesContainerReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesContainerReadinessProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredTemplatesContainerReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerReadinessProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredTemplatesContainerReadinessProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredTemplatesContainerResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerResourcesRequests>}>;
        }

        export interface WorkflowStatusStoredTemplatesContainerResourcesLimits {
        }

        export interface WorkflowStatusStoredTemplatesContainerResourcesRequests {
        }

        export interface WorkflowStatusStoredTemplatesContainerSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerSecurityContextWindowsOptions>;
        }

        export interface WorkflowStatusStoredTemplatesContainerSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesContainerSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesContainerSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesContainerStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredTemplatesContainerStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesContainerStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesContainerStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesContainerStartupProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredTemplatesContainerStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesContainerStartupProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredTemplatesContainerStartupProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredTemplatesContainerVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesContainerVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesDag {
            failFast?: pulumi.Input<boolean>;
            target?: pulumi.Input<string>;
            tasks: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasks>[]>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasks {
            arguments?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArguments>;
            continueOn?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksContinueOn>;
            dependencies?: pulumi.Input<pulumi.Input<string>[]>;
            depends?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            onExit?: pulumi.Input<string>;
            template: pulumi.Input<string>;
            templateRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksTemplateRef>;
            when?: pulumi.Input<string>;
            withItems?: pulumi.Input<pulumi.Input<{[key: string]: any}>[]>;
            withParam?: pulumi.Input<string>;
            withSequence?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksWithSequence>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArguments {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsParameters>[]>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsArchiveTar>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksArgumentsParametersValueFrom>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksArgumentsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksContinueOn {
            error?: pulumi.Input<boolean>;
            failed?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksTemplateRef {
            clusterScope?: pulumi.Input<boolean>;
            name?: pulumi.Input<string>;
            runtimeResolution?: pulumi.Input<boolean>;
            template?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksWithSequence {
            count?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksWithSequenceCount>;
            end?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksWithSequenceEnd>;
            format?: pulumi.Input<string>;
            start?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesDagTasksWithSequenceStart>;
        }

        export interface WorkflowStatusStoredTemplatesDagTasksWithSequenceCount {
        }

        export interface WorkflowStatusStoredTemplatesDagTasksWithSequenceEnd {
        }

        export interface WorkflowStatusStoredTemplatesDagTasksWithSequenceStart {
        }

        export interface WorkflowStatusStoredTemplatesExecutor {
            serviceAccountName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesHostAliases {
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            ip?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainers {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersLivenessProbe>;
            mirrorVolumeMounts?: pulumi.Input<boolean>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersSecurityContext>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersEnvValueFrom>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersEnvFromSecretRef>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersEnvValueFromSecretKeyRef>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersEnvValueFromResourceFieldRefDivisor {
        }

        export interface WorkflowStatusStoredTemplatesInitContainersEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersLifecyclePreStop>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersLifecyclePostStartTcpSocket>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersLifecyclePostStartHttpGetPort {
        }

        export interface WorkflowStatusStoredTemplatesInitContainersLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersLifecyclePostStartTcpSocketPort>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersLifecyclePostStartTcpSocketPort {
        }

        export interface WorkflowStatusStoredTemplatesInitContainersLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersLifecyclePreStopTcpSocket>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersLifecyclePreStopHttpGetPort {
        }

        export interface WorkflowStatusStoredTemplatesInitContainersLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersLifecyclePreStopTcpSocketPort>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersLifecyclePreStopTcpSocketPort {
        }

        export interface WorkflowStatusStoredTemplatesInitContainersLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersLivenessProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredTemplatesInitContainersLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersLivenessProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersLivenessProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredTemplatesInitContainersPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersReadinessProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredTemplatesInitContainersReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersReadinessProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersReadinessProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredTemplatesInitContainersResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersResourcesRequests>}>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersResourcesLimits {
        }

        export interface WorkflowStatusStoredTemplatesInitContainersResourcesRequests {
        }

        export interface WorkflowStatusStoredTemplatesInitContainersSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersSecurityContextWindowsOptions>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersStartupProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredTemplatesInitContainersStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInitContainersStartupProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersStartupProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredTemplatesInitContainersVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInitContainersVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInputs {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsParameters>[]>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsArchiveTar>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesInputsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesInputsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesInputsParametersValueFrom>;
        }

        export interface WorkflowStatusStoredTemplatesInputsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowStatusStoredTemplatesMemoize {
            cache: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesMemoizeCache>;
            key: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesMemoizeCache {
            configMap: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesMemoizeCacheConfigMap>;
        }

        export interface WorkflowStatusStoredTemplatesMemoizeCacheConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowStatusStoredTemplatesMetrics {
            prometheus: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesMetricsPrometheus>[]>;
        }

        export interface WorkflowStatusStoredTemplatesMetricsPrometheus {
            counter?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesMetricsPrometheusCounter>;
            gauge?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesMetricsPrometheusGauge>;
            help: pulumi.Input<string>;
            histogram?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesMetricsPrometheusHistogram>;
            labels?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesMetricsPrometheusLabels>[]>;
            name: pulumi.Input<string>;
            when?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesMetricsPrometheusCounter {
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesMetricsPrometheusGauge {
            realtime: pulumi.Input<boolean>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesMetricsPrometheusHistogram {
            buckets: pulumi.Input<pulumi.Input<number>[]>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesMetricsPrometheusLabels {
            key: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesOutputs {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifacts>[]>;
            exitCode?: pulumi.Input<string>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsParameters>[]>;
            result?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsArchiveTar>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesOutputsParametersValueFrom>;
        }

        export interface WorkflowStatusStoredTemplatesOutputsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowStatusStoredTemplatesResource {
            action: pulumi.Input<string>;
            failureCondition?: pulumi.Input<string>;
            flags?: pulumi.Input<pulumi.Input<string>[]>;
            manifest?: pulumi.Input<string>;
            mergeStrategy?: pulumi.Input<string>;
            setOwnerReference?: pulumi.Input<boolean>;
            successCondition?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesRetryStrategy {
            backoff?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesRetryStrategyBackoff>;
            limit?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesRetryStrategyLimit>;
            retryPolicy?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesRetryStrategyBackoff {
            duration?: pulumi.Input<string>;
            factor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesRetryStrategyBackoffFactor>;
            maxDuration?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesRetryStrategyBackoffFactor {
        }

        export interface WorkflowStatusStoredTemplatesRetryStrategyLimit {
        }

        export interface WorkflowStatusStoredTemplatesScript {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptLivenessProbe>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptSecurityContext>;
            source: pulumi.Input<string>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesScriptEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptEnvValueFrom>;
        }

        export interface WorkflowStatusStoredTemplatesScriptEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptEnvFromSecretRef>;
        }

        export interface WorkflowStatusStoredTemplatesScriptEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesScriptEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesScriptEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptEnvValueFromSecretKeyRef>;
        }

        export interface WorkflowStatusStoredTemplatesScriptEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesScriptEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesScriptEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesScriptEnvValueFromResourceFieldRefDivisor {
        }

        export interface WorkflowStatusStoredTemplatesScriptEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesScriptLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptLifecyclePreStop>;
        }

        export interface WorkflowStatusStoredTemplatesScriptLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptLifecyclePostStartTcpSocket>;
        }

        export interface WorkflowStatusStoredTemplatesScriptLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesScriptLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesScriptLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesScriptLifecyclePostStartHttpGetPort {
        }

        export interface WorkflowStatusStoredTemplatesScriptLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptLifecyclePostStartTcpSocketPort>;
        }

        export interface WorkflowStatusStoredTemplatesScriptLifecyclePostStartTcpSocketPort {
        }

        export interface WorkflowStatusStoredTemplatesScriptLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptLifecyclePreStopTcpSocket>;
        }

        export interface WorkflowStatusStoredTemplatesScriptLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesScriptLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesScriptLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesScriptLifecyclePreStopHttpGetPort {
        }

        export interface WorkflowStatusStoredTemplatesScriptLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptLifecyclePreStopTcpSocketPort>;
        }

        export interface WorkflowStatusStoredTemplatesScriptLifecyclePreStopTcpSocketPort {
        }

        export interface WorkflowStatusStoredTemplatesScriptLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredTemplatesScriptLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesScriptLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesScriptLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesScriptLivenessProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredTemplatesScriptLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptLivenessProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredTemplatesScriptLivenessProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredTemplatesScriptPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesScriptReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredTemplatesScriptReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesScriptReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesScriptReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesScriptReadinessProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredTemplatesScriptReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptReadinessProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredTemplatesScriptReadinessProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredTemplatesScriptResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptResourcesRequests>}>;
        }

        export interface WorkflowStatusStoredTemplatesScriptResourcesLimits {
        }

        export interface WorkflowStatusStoredTemplatesScriptResourcesRequests {
        }

        export interface WorkflowStatusStoredTemplatesScriptSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptSecurityContextWindowsOptions>;
        }

        export interface WorkflowStatusStoredTemplatesScriptSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesScriptSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesScriptSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesScriptStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredTemplatesScriptStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesScriptStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesScriptStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesScriptStartupProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredTemplatesScriptStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesScriptStartupProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredTemplatesScriptStartupProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredTemplatesScriptVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesScriptVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSecurityContext {
            fsGroup?: pulumi.Input<number>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSecurityContextSeLinuxOptions>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSecurityContextWindowsOptions>;
        }

        export interface WorkflowStatusStoredTemplatesSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSecurityContextSysctls {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSidecars {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsLivenessProbe>;
            mirrorVolumeMounts?: pulumi.Input<boolean>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsSecurityContext>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsEnvValueFrom>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsEnvFromSecretRef>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsEnvValueFromSecretKeyRef>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsEnvValueFromResourceFieldRefDivisor {
        }

        export interface WorkflowStatusStoredTemplatesSidecarsEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsLifecyclePreStop>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsLifecyclePostStartTcpSocket>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsLifecyclePostStartHttpGetPort {
        }

        export interface WorkflowStatusStoredTemplatesSidecarsLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsLifecyclePostStartTcpSocketPort>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsLifecyclePostStartTcpSocketPort {
        }

        export interface WorkflowStatusStoredTemplatesSidecarsLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsLifecyclePreStopTcpSocket>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsLifecyclePreStopHttpGetPort {
        }

        export interface WorkflowStatusStoredTemplatesSidecarsLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsLifecyclePreStopTcpSocketPort>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsLifecyclePreStopTcpSocketPort {
        }

        export interface WorkflowStatusStoredTemplatesSidecarsLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsLivenessProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredTemplatesSidecarsLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsLivenessProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsLivenessProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredTemplatesSidecarsPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsReadinessProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredTemplatesSidecarsReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsReadinessProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsReadinessProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredTemplatesSidecarsResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsResourcesRequests>}>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsResourcesLimits {
        }

        export interface WorkflowStatusStoredTemplatesSidecarsResourcesRequests {
        }

        export interface WorkflowStatusStoredTemplatesSidecarsSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsSecurityContextWindowsOptions>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsStartupProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredTemplatesSidecarsStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSidecarsStartupProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsStartupProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredTemplatesSidecarsVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSidecarsVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSuspend {
            duration?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSynchronization {
            mutex?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSynchronizationMutex>;
            semaphore?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSynchronizationSemaphore>;
        }

        export interface WorkflowStatusStoredTemplatesSynchronizationMutex {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesSynchronizationSemaphore {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesSynchronizationSemaphoreConfigMapKeyRef>;
        }

        export interface WorkflowStatusStoredTemplatesSynchronizationSemaphoreConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesTemplateRef {
            clusterScope?: pulumi.Input<boolean>;
            name?: pulumi.Input<string>;
            runtimeResolution?: pulumi.Input<boolean>;
            template?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesCephfs>;
            cinder?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesCinder>;
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesConfigMap>;
            csi?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesEmptyDir>;
            fc?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesFc>;
            flexVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesIscsi>;
            name: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesProjected>;
            quobyte?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesScaleIO>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesSecret>;
            storageos?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesVsphereVolume>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName: pulumi.Input<string>;
            diskURI: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName: pulumi.Input<string>;
            shareName: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesCephfs {
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesCinderSecretRef>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesCsi {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesDownwardAPIItems>[]>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface WorkflowStatusStoredTemplatesVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesEmptyDirSizeLimit>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesEmptyDirSizeLimit {
        }

        export interface WorkflowStatusStoredTemplatesVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesFlexVolume {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesFlexVolumeSecretRef>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesGlusterfs {
            endpoints: pulumi.Input<string>;
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesHostPath {
            path: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesIscsiSecretRef>;
            targetPortal: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesNfs {
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesPersistentVolumeClaim {
            claimName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesProjectedSources>[]>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesProjectedSourcesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface WorkflowStatusStoredTemplatesVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesProjectedSourcesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesRbd {
            fsType?: pulumi.Input<string>;
            image: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredTemplatesVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredTemplatesVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpec {
            activeDeadlineSeconds?: pulumi.Input<number>;
            affinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinity>;
            arguments?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArguments>;
            artifactRepositoryRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArtifactRepositoryRef>;
            automountServiceAccountToken?: pulumi.Input<boolean>;
            dnsConfig?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecDnsConfig>;
            dnsPolicy?: pulumi.Input<string>;
            entrypoint?: pulumi.Input<string>;
            executor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecExecutor>;
            hostAliases?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecHostAliases>[]>;
            hostNetwork?: pulumi.Input<boolean>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecImagePullSecrets>[]>;
            metrics?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecMetrics>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            onExit?: pulumi.Input<string>;
            parallelism?: pulumi.Input<number>;
            podDisruptionBudget?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecPodDisruptionBudget>;
            podGC?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecPodGC>;
            podPriority?: pulumi.Input<number>;
            podPriorityClassName?: pulumi.Input<string>;
            podSpecPatch?: pulumi.Input<string>;
            priority?: pulumi.Input<number>;
            schedulerName?: pulumi.Input<string>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecSecurityContext>;
            serviceAccountName?: pulumi.Input<string>;
            shutdown?: pulumi.Input<string>;
            suspend?: pulumi.Input<boolean>;
            synchronization?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecSynchronization>;
            templates?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplates>[]>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTolerations>[]>;
            ttlSecondsAfterFinished?: pulumi.Input<number>;
            ttlStrategy?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTtlStrategy>;
            volumeClaimTemplates?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumeClaimTemplates>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumes>[]>;
            workflowTemplateRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecWorkflowTemplateRef>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinity {
            nodeAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAntiAffinity>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArguments {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsParameters>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsArchiveTar>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecArgumentsParametersValueFrom>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArgumentsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecArtifactRepositoryRef {
            configMap?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecDnsConfig {
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            options?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecDnsConfigOptions>[]>;
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecDnsConfigOptions {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecExecutor {
            serviceAccountName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecHostAliases {
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            ip?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecMetrics {
            prometheus: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecMetricsPrometheus>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecMetricsPrometheus {
            counter?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecMetricsPrometheusCounter>;
            gauge?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecMetricsPrometheusGauge>;
            help: pulumi.Input<string>;
            histogram?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecMetricsPrometheusHistogram>;
            labels?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecMetricsPrometheusLabels>[]>;
            name: pulumi.Input<string>;
            when?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecMetricsPrometheusCounter {
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecMetricsPrometheusGauge {
            realtime: pulumi.Input<boolean>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecMetricsPrometheusHistogram {
            buckets: pulumi.Input<pulumi.Input<number>[]>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecMetricsPrometheusLabels {
            key: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecPodDisruptionBudget {
            maxUnavailable?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecPodDisruptionBudgetMaxUnavailable>;
            minAvailable?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecPodDisruptionBudgetMinAvailable>;
            selector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecPodDisruptionBudgetSelector>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecPodDisruptionBudgetMaxUnavailable {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecPodDisruptionBudgetMinAvailable {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecPodDisruptionBudgetSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecPodDisruptionBudgetSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecPodDisruptionBudgetSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecPodGC {
            strategy?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecSecurityContext {
            fsGroup?: pulumi.Input<number>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecSecurityContextSeLinuxOptions>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecSecurityContextWindowsOptions>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecSecurityContextSysctls {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecSynchronization {
            mutex?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecSynchronizationMutex>;
            semaphore?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecSynchronizationSemaphore>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecSynchronizationMutex {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecSynchronizationSemaphore {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecSynchronizationSemaphoreConfigMapKeyRef>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecSynchronizationSemaphoreConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplates {
            activeDeadlineSeconds?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesActiveDeadlineSeconds>;
            affinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinity>;
            archiveLocation?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocation>;
            arguments?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArguments>;
            automountServiceAccountToken?: pulumi.Input<boolean>;
            container?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainer>;
            daemon?: pulumi.Input<boolean>;
            dag?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDag>;
            executor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesExecutor>;
            hostAliases?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesHostAliases>[]>;
            initContainers?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainers>[]>;
            inputs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputs>;
            memoize?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesMemoize>;
            metadata?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesMetadata>;
            metrics?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesMetrics>;
            name: pulumi.Input<string>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            outputs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputs>;
            parallelism?: pulumi.Input<number>;
            podSpecPatch?: pulumi.Input<string>;
            priority?: pulumi.Input<number>;
            priorityClassName?: pulumi.Input<string>;
            resource?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesResource>;
            resubmitPendingPods?: pulumi.Input<boolean>;
            retryStrategy?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesRetryStrategy>;
            schedulerName?: pulumi.Input<string>;
            script?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScript>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSecurityContext>;
            serviceAccountName?: pulumi.Input<string>;
            sidecars?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecars>[]>;
            steps?: pulumi.Input<pulumi.Input<any[]>[]>;
            suspend?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSuspend>;
            synchronization?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSynchronization>;
            template?: pulumi.Input<string>;
            templateRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesTemplateRef>;
            timeout?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesTolerations>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumes>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesActiveDeadlineSeconds {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinity {
            nodeAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAntiAffinity>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocation {
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationArtifactory>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationGit>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationHttp>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationOss>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationS3>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationArtifactoryUsernameSecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationGcsServiceAccountKeySecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationGitUsernameSecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationOssSecretKeySecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArchiveLocationS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArguments {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsParameters>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsArchiveTar>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsParametersValueFrom>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesArgumentsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainer {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLivenessProbe>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerSecurityContext>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerEnvValueFrom>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerEnvFromSecretRef>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerEnvValueFromSecretKeyRef>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerEnvValueFromResourceFieldRefDivisor {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePreStop>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePostStartTcpSocket>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePostStartHttpGetPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePostStartTcpSocketPort>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePostStartTcpSocketPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePreStopTcpSocket>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePreStopHttpGetPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePreStopTcpSocketPort>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLifecyclePreStopTcpSocketPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLivenessProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLivenessProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerLivenessProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerReadinessProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerReadinessProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerReadinessProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerResourcesRequests>}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerResourcesLimits {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerResourcesRequests {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerSecurityContextWindowsOptions>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerStartupProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerStartupProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerStartupProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesContainerVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDag {
            failFast?: pulumi.Input<boolean>;
            target?: pulumi.Input<string>;
            tasks: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasks>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasks {
            arguments?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArguments>;
            continueOn?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksContinueOn>;
            dependencies?: pulumi.Input<pulumi.Input<string>[]>;
            depends?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            onExit?: pulumi.Input<string>;
            template: pulumi.Input<string>;
            templateRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksTemplateRef>;
            when?: pulumi.Input<string>;
            withItems?: pulumi.Input<pulumi.Input<{[key: string]: any}>[]>;
            withParam?: pulumi.Input<string>;
            withSequence?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksWithSequence>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArguments {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsParameters>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArchiveTar>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsParametersValueFrom>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksArgumentsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksContinueOn {
            error?: pulumi.Input<boolean>;
            failed?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksTemplateRef {
            clusterScope?: pulumi.Input<boolean>;
            name?: pulumi.Input<string>;
            runtimeResolution?: pulumi.Input<boolean>;
            template?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksWithSequence {
            count?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksWithSequenceCount>;
            end?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksWithSequenceEnd>;
            format?: pulumi.Input<string>;
            start?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksWithSequenceStart>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksWithSequenceCount {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksWithSequenceEnd {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesDagTasksWithSequenceStart {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesExecutor {
            serviceAccountName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesHostAliases {
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            ip?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainers {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLivenessProbe>;
            mirrorVolumeMounts?: pulumi.Input<boolean>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersSecurityContext>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersEnvValueFrom>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersEnvFromSecretRef>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersEnvValueFromSecretKeyRef>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersEnvValueFromResourceFieldRefDivisor {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStop>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartTcpSocket>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartHttpGetPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartTcpSocketPort>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartTcpSocketPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopTcpSocket>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopHttpGetPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopTcpSocketPort>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopTcpSocketPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLivenessProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLivenessProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersLivenessProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersReadinessProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersReadinessProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersReadinessProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersResourcesRequests>}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersResourcesLimits {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersResourcesRequests {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersSecurityContextWindowsOptions>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersStartupProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersStartupProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersStartupProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInitContainersVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputs {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsParameters>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsArchiveTar>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsParametersValueFrom>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesInputsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesMemoize {
            cache: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesMemoizeCache>;
            key: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesMemoizeCache {
            configMap: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesMemoizeCacheConfigMap>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesMemoizeCacheConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesMetrics {
            prometheus: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesMetricsPrometheus>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesMetricsPrometheus {
            counter?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesMetricsPrometheusCounter>;
            gauge?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesMetricsPrometheusGauge>;
            help: pulumi.Input<string>;
            histogram?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesMetricsPrometheusHistogram>;
            labels?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesMetricsPrometheusLabels>[]>;
            name: pulumi.Input<string>;
            when?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesMetricsPrometheusCounter {
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesMetricsPrometheusGauge {
            realtime: pulumi.Input<boolean>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesMetricsPrometheusHistogram {
            buckets: pulumi.Input<pulumi.Input<number>[]>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesMetricsPrometheusLabels {
            key: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputs {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifacts>[]>;
            exitCode?: pulumi.Input<string>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsParameters>[]>;
            result?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsArchiveTar>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsParametersValueFrom>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesOutputsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesResource {
            action: pulumi.Input<string>;
            failureCondition?: pulumi.Input<string>;
            flags?: pulumi.Input<pulumi.Input<string>[]>;
            manifest?: pulumi.Input<string>;
            mergeStrategy?: pulumi.Input<string>;
            setOwnerReference?: pulumi.Input<boolean>;
            successCondition?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesRetryStrategy {
            backoff?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesRetryStrategyBackoff>;
            limit?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesRetryStrategyLimit>;
            retryPolicy?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesRetryStrategyBackoff {
            duration?: pulumi.Input<string>;
            factor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesRetryStrategyBackoffFactor>;
            maxDuration?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesRetryStrategyBackoffFactor {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesRetryStrategyLimit {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScript {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLivenessProbe>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptSecurityContext>;
            source: pulumi.Input<string>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptEnvValueFrom>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptEnvFromSecretRef>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptEnvValueFromSecretKeyRef>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptEnvValueFromResourceFieldRefDivisor {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePreStop>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePostStartTcpSocket>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePostStartHttpGetPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePostStartTcpSocketPort>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePostStartTcpSocketPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePreStopTcpSocket>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePreStopHttpGetPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePreStopTcpSocketPort>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLifecyclePreStopTcpSocketPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLivenessProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLivenessProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptLivenessProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptReadinessProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptReadinessProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptReadinessProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptResourcesRequests>}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptResourcesLimits {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptResourcesRequests {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptSecurityContextWindowsOptions>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptStartupProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptStartupProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptStartupProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesScriptVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSecurityContext {
            fsGroup?: pulumi.Input<number>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSecurityContextSeLinuxOptions>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSecurityContextWindowsOptions>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSecurityContextSysctls {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecars {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLivenessProbe>;
            mirrorVolumeMounts?: pulumi.Input<boolean>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsSecurityContext>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsEnvValueFrom>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsEnvFromSecretRef>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsEnvValueFromSecretKeyRef>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsEnvValueFromResourceFieldRefDivisor {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStop>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartTcpSocket>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartHttpGetPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartTcpSocketPort>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartTcpSocketPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopTcpSocket>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopHttpGetPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopTcpSocketPort>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopTcpSocketPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLivenessProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLivenessProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsLivenessProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsReadinessProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsReadinessProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsReadinessProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsResourcesRequests>}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsResourcesLimits {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsResourcesRequests {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsSecurityContextWindowsOptions>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsStartupProbeHttpGetPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsStartupProbeTcpSocketPort>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsStartupProbeTcpSocketPort {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSidecarsVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSuspend {
            duration?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSynchronization {
            mutex?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSynchronizationMutex>;
            semaphore?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSynchronizationSemaphore>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSynchronizationMutex {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSynchronizationSemaphore {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesSynchronizationSemaphoreConfigMapKeyRef>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesSynchronizationSemaphoreConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesTemplateRef {
            clusterScope?: pulumi.Input<boolean>;
            name?: pulumi.Input<string>;
            runtimeResolution?: pulumi.Input<boolean>;
            template?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesCephfs>;
            cinder?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesCinder>;
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesConfigMap>;
            csi?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesEmptyDir>;
            fc?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesFc>;
            flexVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesIscsi>;
            name: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjected>;
            quobyte?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesScaleIO>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesSecret>;
            storageos?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesVsphereVolume>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName: pulumi.Input<string>;
            diskURI: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName: pulumi.Input<string>;
            shareName: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesCephfs {
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesCinderSecretRef>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesCsi {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesDownwardAPIItems>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesEmptyDirSizeLimit>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesEmptyDirSizeLimit {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesFlexVolume {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesFlexVolumeSecretRef>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesGlusterfs {
            endpoints: pulumi.Input<string>;
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesHostPath {
            path: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesIscsiSecretRef>;
            targetPortal: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesNfs {
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesPersistentVolumeClaim {
            claimName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjectedSources>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjectedSourcesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjectedSourcesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesRbd {
            fsType?: pulumi.Input<string>;
            image: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTemplatesVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecTtlStrategy {
            secondsAfterCompletion?: pulumi.Input<number>;
            secondsAfterFailure?: pulumi.Input<number>;
            secondsAfterSuccess?: pulumi.Input<number>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumeClaimTemplates {
            apiVersion?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            metadata?: pulumi.Input<{[key: string]: any}>;
            spec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumeClaimTemplatesSpec>;
            status?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumeClaimTemplatesStatus>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumeClaimTemplatesSpec {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumeClaimTemplatesSpecDataSource>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumeClaimTemplatesSpecResources>;
            selector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumeClaimTemplatesSpecSelector>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumeClaimTemplatesSpecDataSource {
            apiGroup?: pulumi.Input<string>;
            kind: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumeClaimTemplatesSpecResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumeClaimTemplatesSpecResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumeClaimTemplatesSpecResourcesRequests>}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumeClaimTemplatesSpecResourcesLimits {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumeClaimTemplatesSpecResourcesRequests {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumeClaimTemplatesSpecSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumeClaimTemplatesSpecSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumeClaimTemplatesSpecSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumeClaimTemplatesStatus {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            capacity?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumeClaimTemplatesStatusCapacity>}>;
            conditions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumeClaimTemplatesStatusConditions>[]>;
            phase?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumeClaimTemplatesStatusCapacity {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumeClaimTemplatesStatusConditions {
            lastProbeTime?: pulumi.Input<string>;
            lastTransitionTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            reason?: pulumi.Input<string>;
            status: pulumi.Input<string>;
            type: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesCephfs>;
            cinder?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesCinder>;
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesConfigMap>;
            csi?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesEmptyDir>;
            fc?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesFc>;
            flexVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesIscsi>;
            name: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesProjected>;
            quobyte?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesScaleIO>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesSecret>;
            storageos?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesVsphereVolume>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName: pulumi.Input<string>;
            diskURI: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName: pulumi.Input<string>;
            shareName: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesCephfs {
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesCinderSecretRef>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesCsi {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesDownwardAPIItems>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesEmptyDirSizeLimit>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesEmptyDirSizeLimit {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesFlexVolume {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesFlexVolumeSecretRef>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesGlusterfs {
            endpoints: pulumi.Input<string>;
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesHostPath {
            path: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesIscsiSecretRef>;
            targetPortal: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesNfs {
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesPersistentVolumeClaim {
            claimName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesProjectedSources>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesProjectedSourcesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesProjectedSourcesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesRbd {
            fsType?: pulumi.Input<string>;
            image: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusStoredWorkflowTemplateSpecVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath: pulumi.Input<string>;
        }

        export interface WorkflowStatusStoredWorkflowTemplateSpecWorkflowTemplateRef {
            clusterScope?: pulumi.Input<boolean>;
            name?: pulumi.Input<string>;
        }

        export interface WorkflowStatusSynchronization {
            mutex?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusSynchronizationMutex>;
            semaphore?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusSynchronizationSemaphore>;
        }

        export interface WorkflowStatusSynchronizationMutex {
            holding?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusSynchronizationMutexHolding>[]>;
            waiting?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusSynchronizationMutexWaiting>[]>;
        }

        export interface WorkflowStatusSynchronizationMutexHolding {
            holder?: pulumi.Input<string>;
            mutex?: pulumi.Input<string>;
        }

        export interface WorkflowStatusSynchronizationMutexWaiting {
            holder?: pulumi.Input<string>;
            mutex?: pulumi.Input<string>;
        }

        export interface WorkflowStatusSynchronizationSemaphore {
            holding?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusSynchronizationSemaphoreHolding>[]>;
            waiting?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowStatusSynchronizationSemaphoreWaiting>[]>;
        }

        export interface WorkflowStatusSynchronizationSemaphoreHolding {
            holders?: pulumi.Input<pulumi.Input<string>[]>;
            semaphore?: pulumi.Input<string>;
        }

        export interface WorkflowStatusSynchronizationSemaphoreWaiting {
            holders?: pulumi.Input<pulumi.Input<string>[]>;
            semaphore?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpec {
            activeDeadlineSeconds?: pulumi.Input<number>;
            affinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinity>;
            arguments?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArguments>;
            artifactRepositoryRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArtifactRepositoryRef>;
            automountServiceAccountToken?: pulumi.Input<boolean>;
            dnsConfig?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecDnsConfig>;
            dnsPolicy?: pulumi.Input<string>;
            entrypoint?: pulumi.Input<string>;
            executor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecExecutor>;
            hostAliases?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecHostAliases>[]>;
            hostNetwork?: pulumi.Input<boolean>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecImagePullSecrets>[]>;
            metrics?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecMetrics>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            onExit?: pulumi.Input<string>;
            parallelism?: pulumi.Input<number>;
            podDisruptionBudget?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecPodDisruptionBudget>;
            podGC?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecPodGC>;
            podPriority?: pulumi.Input<number>;
            podPriorityClassName?: pulumi.Input<string>;
            podSpecPatch?: pulumi.Input<string>;
            priority?: pulumi.Input<number>;
            schedulerName?: pulumi.Input<string>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecSecurityContext>;
            serviceAccountName?: pulumi.Input<string>;
            shutdown?: pulumi.Input<string>;
            suspend?: pulumi.Input<boolean>;
            synchronization?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecSynchronization>;
            templates?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplates>[]>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTolerations>[]>;
            ttlSecondsAfterFinished?: pulumi.Input<number>;
            ttlStrategy?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTtlStrategy>;
            volumeClaimTemplates?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumeClaimTemplates>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumes>[]>;
            workflowMetadata?: pulumi.Input<{[key: string]: any}>;
            workflowTemplateRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecWorkflowTemplateRef>;
        }

        export interface WorkflowTemplateSpecAffinity {
            nodeAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityPodAntiAffinity>;
        }

        export interface WorkflowTemplateSpecAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface WorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface WorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface WorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface WorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface WorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface WorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecArguments {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsParameters>[]>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsArchiveTar>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecArgumentsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecArgumentsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecArgumentsParametersValueFrom>;
        }

        export interface WorkflowTemplateSpecArgumentsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowTemplateSpecArtifactRepositoryRef {
            configMap?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecDnsConfig {
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            options?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecDnsConfigOptions>[]>;
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecDnsConfigOptions {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecExecutor {
            serviceAccountName?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecHostAliases {
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            ip?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecMetrics {
            prometheus: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecMetricsPrometheus>[]>;
        }

        export interface WorkflowTemplateSpecMetricsPrometheus {
            counter?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecMetricsPrometheusCounter>;
            gauge?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecMetricsPrometheusGauge>;
            help: pulumi.Input<string>;
            histogram?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecMetricsPrometheusHistogram>;
            labels?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecMetricsPrometheusLabels>[]>;
            name: pulumi.Input<string>;
            when?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecMetricsPrometheusCounter {
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecMetricsPrometheusGauge {
            realtime: pulumi.Input<boolean>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecMetricsPrometheusHistogram {
            buckets: pulumi.Input<pulumi.Input<number>[]>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecMetricsPrometheusLabels {
            key: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecPodDisruptionBudget {
            maxUnavailable?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecPodDisruptionBudgetMaxUnavailable>;
            minAvailable?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecPodDisruptionBudgetMinAvailable>;
            selector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecPodDisruptionBudgetSelector>;
        }

        export interface WorkflowTemplateSpecPodDisruptionBudgetMaxUnavailable {
        }

        export interface WorkflowTemplateSpecPodDisruptionBudgetMinAvailable {
        }

        export interface WorkflowTemplateSpecPodDisruptionBudgetSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecPodDisruptionBudgetSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowTemplateSpecPodDisruptionBudgetSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecPodGC {
            strategy?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecSecurityContext {
            fsGroup?: pulumi.Input<number>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecSecurityContextSeLinuxOptions>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecSecurityContextWindowsOptions>;
        }

        export interface WorkflowTemplateSpecSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecSecurityContextSysctls {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecSynchronization {
            mutex?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecSynchronizationMutex>;
            semaphore?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecSynchronizationSemaphore>;
        }

        export interface WorkflowTemplateSpecSynchronizationMutex {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecSynchronizationSemaphore {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecSynchronizationSemaphoreConfigMapKeyRef>;
        }

        export interface WorkflowTemplateSpecSynchronizationSemaphoreConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplates {
            activeDeadlineSeconds?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesActiveDeadlineSeconds>;
            affinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinity>;
            archiveLocation?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArchiveLocation>;
            arguments?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArguments>;
            automountServiceAccountToken?: pulumi.Input<boolean>;
            container?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainer>;
            daemon?: pulumi.Input<boolean>;
            dag?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDag>;
            executor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesExecutor>;
            hostAliases?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesHostAliases>[]>;
            initContainers?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainers>[]>;
            inputs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputs>;
            memoize?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesMemoize>;
            metadata?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesMetadata>;
            metrics?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesMetrics>;
            name: pulumi.Input<string>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            outputs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputs>;
            parallelism?: pulumi.Input<number>;
            podSpecPatch?: pulumi.Input<string>;
            priority?: pulumi.Input<number>;
            priorityClassName?: pulumi.Input<string>;
            resource?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesResource>;
            resubmitPendingPods?: pulumi.Input<boolean>;
            retryStrategy?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesRetryStrategy>;
            schedulerName?: pulumi.Input<string>;
            script?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScript>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSecurityContext>;
            serviceAccountName?: pulumi.Input<string>;
            sidecars?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecars>[]>;
            steps?: pulumi.Input<pulumi.Input<any[]>[]>;
            suspend?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSuspend>;
            synchronization?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSynchronization>;
            template?: pulumi.Input<string>;
            templateRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesTemplateRef>;
            timeout?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesTolerations>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumes>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesActiveDeadlineSeconds {
        }

        export interface WorkflowTemplateSpecTemplatesAffinity {
            nodeAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityPodAntiAffinity>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowTemplateSpecTemplatesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesArchiveLocation {
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArchiveLocationArtifactory>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArchiveLocationGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArchiveLocationGit>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArchiveLocationHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArchiveLocationHttp>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArchiveLocationOss>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArchiveLocationRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArchiveLocationS3>;
        }

        export interface WorkflowTemplateSpecTemplatesArchiveLocationArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArchiveLocationArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArchiveLocationArtifactoryUsernameSecret>;
        }

        export interface WorkflowTemplateSpecTemplatesArchiveLocationArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArchiveLocationArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArchiveLocationGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArchiveLocationGcsServiceAccountKeySecret>;
        }

        export interface WorkflowTemplateSpecTemplatesArchiveLocationGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArchiveLocationGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArchiveLocationGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArchiveLocationGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArchiveLocationGitUsernameSecret>;
        }

        export interface WorkflowTemplateSpecTemplatesArchiveLocationGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArchiveLocationGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArchiveLocationGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArchiveLocationHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArchiveLocationHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArchiveLocationHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArchiveLocationHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesArchiveLocationHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArchiveLocationHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArchiveLocationHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArchiveLocationHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesArchiveLocationOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArchiveLocationOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArchiveLocationOssSecretKeySecret>;
        }

        export interface WorkflowTemplateSpecTemplatesArchiveLocationOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArchiveLocationOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArchiveLocationRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesArchiveLocationS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArchiveLocationS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArchiveLocationS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArchiveLocationS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArchiveLocationS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArguments {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsParameters>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsArchiveTar>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesArgumentsParametersValueFrom>;
        }

        export interface WorkflowTemplateSpecTemplatesArgumentsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowTemplateSpecTemplatesContainer {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerEnvFrom>[]>;
            image: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerLivenessProbe>;
            name?: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerSecurityContext>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerEnvValueFrom>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerEnvFromSecretRef>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerEnvValueFromSecretKeyRef>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerEnvValueFromResourceFieldRefDivisor {
        }

        export interface WorkflowTemplateSpecTemplatesContainerEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerLifecyclePreStop>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerLifecyclePostStartTcpSocket>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerLifecyclePostStartHttpGetPort {
        }

        export interface WorkflowTemplateSpecTemplatesContainerLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerLifecyclePostStartTcpSocketPort>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerLifecyclePostStartTcpSocketPort {
        }

        export interface WorkflowTemplateSpecTemplatesContainerLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerLifecyclePreStopTcpSocket>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerLifecyclePreStopHttpGetPort {
        }

        export interface WorkflowTemplateSpecTemplatesContainerLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerLifecyclePreStopTcpSocketPort>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerLifecyclePreStopTcpSocketPort {
        }

        export interface WorkflowTemplateSpecTemplatesContainerLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerLivenessProbeHttpGetPort {
        }

        export interface WorkflowTemplateSpecTemplatesContainerLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerLivenessProbeTcpSocketPort>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerLivenessProbeTcpSocketPort {
        }

        export interface WorkflowTemplateSpecTemplatesContainerPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerReadinessProbeHttpGetPort {
        }

        export interface WorkflowTemplateSpecTemplatesContainerReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerReadinessProbeTcpSocketPort>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerReadinessProbeTcpSocketPort {
        }

        export interface WorkflowTemplateSpecTemplatesContainerResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerResourcesRequests>}>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerResourcesLimits {
        }

        export interface WorkflowTemplateSpecTemplatesContainerResourcesRequests {
        }

        export interface WorkflowTemplateSpecTemplatesContainerSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerSecurityContextWindowsOptions>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerStartupProbeHttpGetPort {
        }

        export interface WorkflowTemplateSpecTemplatesContainerStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesContainerStartupProbeTcpSocketPort>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerStartupProbeTcpSocketPort {
        }

        export interface WorkflowTemplateSpecTemplatesContainerVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesContainerVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesDag {
            failFast?: pulumi.Input<boolean>;
            target?: pulumi.Input<string>;
            tasks: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasks>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasks {
            arguments?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArguments>;
            continueOn?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksContinueOn>;
            dependencies?: pulumi.Input<pulumi.Input<string>[]>;
            depends?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            onExit?: pulumi.Input<string>;
            template: pulumi.Input<string>;
            templateRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksTemplateRef>;
            when?: pulumi.Input<string>;
            withItems?: pulumi.Input<pulumi.Input<{[key: string]: any}>[]>;
            withParam?: pulumi.Input<string>;
            withSequence?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksWithSequence>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArguments {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsParameters>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArchiveTar>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksArgumentsParametersValueFrom>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksArgumentsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksContinueOn {
            error?: pulumi.Input<boolean>;
            failed?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksTemplateRef {
            clusterScope?: pulumi.Input<boolean>;
            name?: pulumi.Input<string>;
            runtimeResolution?: pulumi.Input<boolean>;
            template?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksWithSequence {
            count?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksWithSequenceCount>;
            end?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksWithSequenceEnd>;
            format?: pulumi.Input<string>;
            start?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesDagTasksWithSequenceStart>;
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksWithSequenceCount {
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksWithSequenceEnd {
        }

        export interface WorkflowTemplateSpecTemplatesDagTasksWithSequenceStart {
        }

        export interface WorkflowTemplateSpecTemplatesExecutor {
            serviceAccountName?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesHostAliases {
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            ip?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainers {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersLivenessProbe>;
            mirrorVolumeMounts?: pulumi.Input<boolean>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersSecurityContext>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersEnvValueFrom>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersEnvFromSecretRef>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersEnvValueFromSecretKeyRef>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersEnvValueFromResourceFieldRefDivisor {
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersLifecyclePreStop>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartTcpSocket>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartHttpGetPort {
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartTcpSocketPort>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersLifecyclePostStartTcpSocketPort {
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopTcpSocket>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopHttpGetPort {
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopTcpSocketPort>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersLifecyclePreStopTcpSocketPort {
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersLivenessProbeHttpGetPort {
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersLivenessProbeTcpSocketPort>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersLivenessProbeTcpSocketPort {
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersReadinessProbeHttpGetPort {
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersReadinessProbeTcpSocketPort>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersReadinessProbeTcpSocketPort {
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersResourcesRequests>}>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersResourcesLimits {
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersResourcesRequests {
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersSecurityContextWindowsOptions>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersStartupProbeHttpGetPort {
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInitContainersStartupProbeTcpSocketPort>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersStartupProbeTcpSocketPort {
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInitContainersVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInputs {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifacts>[]>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsParameters>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsArchiveTar>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesInputsParametersValueFrom>;
        }

        export interface WorkflowTemplateSpecTemplatesInputsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowTemplateSpecTemplatesMemoize {
            cache: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesMemoizeCache>;
            key: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesMemoizeCache {
            configMap: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesMemoizeCacheConfigMap>;
        }

        export interface WorkflowTemplateSpecTemplatesMemoizeCacheConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowTemplateSpecTemplatesMetrics {
            prometheus: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesMetricsPrometheus>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesMetricsPrometheus {
            counter?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesMetricsPrometheusCounter>;
            gauge?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesMetricsPrometheusGauge>;
            help: pulumi.Input<string>;
            histogram?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesMetricsPrometheusHistogram>;
            labels?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesMetricsPrometheusLabels>[]>;
            name: pulumi.Input<string>;
            when?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesMetricsPrometheusCounter {
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesMetricsPrometheusGauge {
            realtime: pulumi.Input<boolean>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesMetricsPrometheusHistogram {
            buckets: pulumi.Input<pulumi.Input<number>[]>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesMetricsPrometheusLabels {
            key: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputs {
            artifacts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifacts>[]>;
            exitCode?: pulumi.Input<string>;
            parameters?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsParameters>[]>;
            result?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifacts {
            archive?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsArchive>;
            archiveLogs?: pulumi.Input<boolean>;
            artifactory?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsArtifactory>;
            from?: pulumi.Input<string>;
            gcs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsGcs>;
            git?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsGit>;
            globalName?: pulumi.Input<string>;
            hdfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsHdfs>;
            http?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsHttp>;
            mode?: pulumi.Input<number>;
            name: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
            oss?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsOss>;
            path?: pulumi.Input<string>;
            raw?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsRaw>;
            s3?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsS3>;
            subPath?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsArchive {
            none?: pulumi.Input<{[key: string]: any}>;
            tar?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsArchiveTar>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsArchiveTar {
            compressionLevel?: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsArtifactory {
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsArtifactoryPasswordSecret>;
            url: pulumi.Input<string>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsArtifactoryUsernameSecret>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsArtifactoryPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsArtifactoryUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsGcs {
            bucket: pulumi.Input<string>;
            key: pulumi.Input<string>;
            serviceAccountKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsGcsServiceAccountKeySecret>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsGcsServiceAccountKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsGit {
            depth?: pulumi.Input<number>;
            fetch?: pulumi.Input<pulumi.Input<string>[]>;
            insecureIgnoreHostKey?: pulumi.Input<boolean>;
            passwordSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsGitPasswordSecret>;
            repo: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
            sshPrivateKeySecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsGitSshPrivateKeySecret>;
            usernameSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsGitUsernameSecret>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsGitPasswordSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsGitSshPrivateKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsGitUsernameSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsHdfs {
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            force?: pulumi.Input<boolean>;
            hdfsUser?: pulumi.Input<string>;
            krbCCacheSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsHdfsKrbCCacheSecret>;
            krbConfigConfigMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsHdfsKrbConfigConfigMap>;
            krbKeytabSecret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsHdfsKrbKeytabSecret>;
            krbRealm?: pulumi.Input<string>;
            krbServicePrincipalName?: pulumi.Input<string>;
            krbUsername?: pulumi.Input<string>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsHdfsKrbCCacheSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsHdfsKrbConfigConfigMap {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsHdfsKrbKeytabSecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsHttp {
            url: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsOss {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsOssAccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            key: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsOssSecretKeySecret>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsOssAccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsOssSecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsRaw {
            data: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsS3 {
            accessKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsS3AccessKeySecret>;
            bucket: pulumi.Input<string>;
            endpoint: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            key: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            roleARN?: pulumi.Input<string>;
            secretKeySecret: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsArtifactsS3SecretKeySecret>;
            useSDKCreds?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsS3AccessKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsArtifactsS3SecretKeySecret {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsParameters {
            default?: pulumi.Input<string>;
            globalName?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesOutputsParametersValueFrom>;
        }

        export interface WorkflowTemplateSpecTemplatesOutputsParametersValueFrom {
            default?: pulumi.Input<string>;
            event?: pulumi.Input<string>;
            jqFilter?: pulumi.Input<string>;
            jsonPath?: pulumi.Input<string>;
            parameter?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            supplied?: pulumi.Input<{[key: string]: any}>;
        }

        export interface WorkflowTemplateSpecTemplatesResource {
            action: pulumi.Input<string>;
            failureCondition?: pulumi.Input<string>;
            flags?: pulumi.Input<pulumi.Input<string>[]>;
            manifest?: pulumi.Input<string>;
            mergeStrategy?: pulumi.Input<string>;
            setOwnerReference?: pulumi.Input<boolean>;
            successCondition?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesRetryStrategy {
            backoff?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesRetryStrategyBackoff>;
            limit?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesRetryStrategyLimit>;
            retryPolicy?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesRetryStrategyBackoff {
            duration?: pulumi.Input<string>;
            factor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesRetryStrategyBackoffFactor>;
            maxDuration?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesRetryStrategyBackoffFactor {
        }

        export interface WorkflowTemplateSpecTemplatesRetryStrategyLimit {
        }

        export interface WorkflowTemplateSpecTemplatesScript {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptEnvFrom>[]>;
            image: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptLivenessProbe>;
            name?: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptSecurityContext>;
            source: pulumi.Input<string>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptEnvValueFrom>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptEnvFromSecretRef>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptEnvValueFromSecretKeyRef>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptEnvValueFromResourceFieldRefDivisor {
        }

        export interface WorkflowTemplateSpecTemplatesScriptEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptLifecyclePreStop>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptLifecyclePostStartTcpSocket>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptLifecyclePostStartHttpGetPort {
        }

        export interface WorkflowTemplateSpecTemplatesScriptLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptLifecyclePostStartTcpSocketPort>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptLifecyclePostStartTcpSocketPort {
        }

        export interface WorkflowTemplateSpecTemplatesScriptLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptLifecyclePreStopTcpSocket>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptLifecyclePreStopHttpGetPort {
        }

        export interface WorkflowTemplateSpecTemplatesScriptLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptLifecyclePreStopTcpSocketPort>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptLifecyclePreStopTcpSocketPort {
        }

        export interface WorkflowTemplateSpecTemplatesScriptLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptLivenessProbeHttpGetPort {
        }

        export interface WorkflowTemplateSpecTemplatesScriptLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptLivenessProbeTcpSocketPort>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptLivenessProbeTcpSocketPort {
        }

        export interface WorkflowTemplateSpecTemplatesScriptPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptReadinessProbeHttpGetPort {
        }

        export interface WorkflowTemplateSpecTemplatesScriptReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptReadinessProbeTcpSocketPort>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptReadinessProbeTcpSocketPort {
        }

        export interface WorkflowTemplateSpecTemplatesScriptResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptResourcesRequests>}>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptResourcesLimits {
        }

        export interface WorkflowTemplateSpecTemplatesScriptResourcesRequests {
        }

        export interface WorkflowTemplateSpecTemplatesScriptSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptSecurityContextWindowsOptions>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptStartupProbeHttpGetPort {
        }

        export interface WorkflowTemplateSpecTemplatesScriptStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesScriptStartupProbeTcpSocketPort>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptStartupProbeTcpSocketPort {
        }

        export interface WorkflowTemplateSpecTemplatesScriptVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesScriptVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSecurityContext {
            fsGroup?: pulumi.Input<number>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSecurityContextSeLinuxOptions>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSecurityContextWindowsOptions>;
        }

        export interface WorkflowTemplateSpecTemplatesSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSecurityContextSysctls {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecars {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsLifecycle>;
            livenessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsLivenessProbe>;
            mirrorVolumeMounts?: pulumi.Input<boolean>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsReadinessProbe>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsResources>;
            securityContext?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsSecurityContext>;
            startupProbe?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsEnvValueFrom>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsEnvFrom {
            configMapRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsEnvFromSecretRef>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsEnvValueFromSecretKeyRef>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsEnvValueFromResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsEnvValueFromResourceFieldRefDivisor {
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsLifecycle {
            postStart?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsLifecyclePreStop>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsLifecyclePostStart {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartTcpSocket>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartHttpGetPort {
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartTcpSocketPort>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsLifecyclePostStartTcpSocketPort {
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsLifecyclePreStop {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopTcpSocket>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopHttpGetPort {
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopTcpSocketPort>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsLifecyclePreStopTcpSocketPort {
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsLivenessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsLivenessProbeHttpGetPort {
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsLivenessProbeTcpSocketPort>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsLivenessProbeTcpSocketPort {
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsReadinessProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsReadinessProbeHttpGetPort {
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsReadinessProbeTcpSocketPort>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsReadinessProbeTcpSocketPort {
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsResourcesRequests>}>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsResourcesLimits {
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsResourcesRequests {
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsSecurityContextWindowsOptions>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsStartupProbe {
            exec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsStartupProbeHttpGetPort {
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSidecarsStartupProbeTcpSocketPort>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsStartupProbeTcpSocketPort {
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSidecarsVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSuspend {
            duration?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSynchronization {
            mutex?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSynchronizationMutex>;
            semaphore?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSynchronizationSemaphore>;
        }

        export interface WorkflowTemplateSpecTemplatesSynchronizationMutex {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesSynchronizationSemaphore {
            configMapKeyRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesSynchronizationSemaphoreConfigMapKeyRef>;
        }

        export interface WorkflowTemplateSpecTemplatesSynchronizationSemaphoreConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesTemplateRef {
            clusterScope?: pulumi.Input<boolean>;
            name?: pulumi.Input<string>;
            runtimeResolution?: pulumi.Input<boolean>;
            template?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesCephfs>;
            cinder?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesCinder>;
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesConfigMap>;
            csi?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesEmptyDir>;
            fc?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesFc>;
            flexVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesIscsi>;
            name: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesProjected>;
            quobyte?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesScaleIO>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesSecret>;
            storageos?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesVsphereVolume>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName: pulumi.Input<string>;
            diskURI: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName: pulumi.Input<string>;
            shareName: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesCephfs {
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesCinderSecretRef>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesCsi {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesDownwardAPIItems>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface WorkflowTemplateSpecTemplatesVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesEmptyDirSizeLimit>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesEmptyDirSizeLimit {
        }

        export interface WorkflowTemplateSpecTemplatesVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesFlexVolume {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesFlexVolumeSecretRef>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesGlusterfs {
            endpoints: pulumi.Input<string>;
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesHostPath {
            path: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesIscsiSecretRef>;
            targetPortal: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesNfs {
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesPersistentVolumeClaim {
            claimName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesProjectedSources>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesProjectedSourcesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface WorkflowTemplateSpecTemplatesVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesProjectedSourcesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesRbd {
            fsType?: pulumi.Input<string>;
            image: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecTemplatesVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTemplatesVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecTtlStrategy {
            secondsAfterCompletion?: pulumi.Input<number>;
            secondsAfterFailure?: pulumi.Input<number>;
            secondsAfterSuccess?: pulumi.Input<number>;
        }

        export interface WorkflowTemplateSpecVolumeClaimTemplates {
            apiVersion?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            metadata?: pulumi.Input<{[key: string]: any}>;
            spec?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumeClaimTemplatesSpec>;
            status?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumeClaimTemplatesStatus>;
        }

        export interface WorkflowTemplateSpecVolumeClaimTemplatesSpec {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumeClaimTemplatesSpecDataSource>;
            resources?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumeClaimTemplatesSpecResources>;
            selector?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumeClaimTemplatesSpecSelector>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumeClaimTemplatesSpecDataSource {
            apiGroup?: pulumi.Input<string>;
            kind: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumeClaimTemplatesSpecResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumeClaimTemplatesSpecResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumeClaimTemplatesSpecResourcesRequests>}>;
        }

        export interface WorkflowTemplateSpecVolumeClaimTemplatesSpecResourcesLimits {
        }

        export interface WorkflowTemplateSpecVolumeClaimTemplatesSpecResourcesRequests {
        }

        export interface WorkflowTemplateSpecVolumeClaimTemplatesSpecSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumeClaimTemplatesSpecSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowTemplateSpecVolumeClaimTemplatesSpecSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecVolumeClaimTemplatesStatus {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            capacity?: pulumi.Input<{[key: string]: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumeClaimTemplatesStatusCapacity>}>;
            conditions?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumeClaimTemplatesStatusConditions>[]>;
            phase?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumeClaimTemplatesStatusCapacity {
        }

        export interface WorkflowTemplateSpecVolumeClaimTemplatesStatusConditions {
            lastProbeTime?: pulumi.Input<string>;
            lastTransitionTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            reason?: pulumi.Input<string>;
            status: pulumi.Input<string>;
            type: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesCephfs>;
            cinder?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesCinder>;
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesConfigMap>;
            csi?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesEmptyDir>;
            fc?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesFc>;
            flexVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesIscsi>;
            name: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesProjected>;
            quobyte?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesScaleIO>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesSecret>;
            storageos?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesVsphereVolume>;
        }

        export interface WorkflowTemplateSpecVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName: pulumi.Input<string>;
            diskURI: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName: pulumi.Input<string>;
            shareName: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesCephfs {
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesCinderSecretRef>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecVolumesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesCsi {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface WorkflowTemplateSpecVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesDownwardAPIItems>[]>;
        }

        export interface WorkflowTemplateSpecVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface WorkflowTemplateSpecVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface WorkflowTemplateSpecVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesEmptyDirSizeLimit>;
        }

        export interface WorkflowTemplateSpecVolumesEmptyDirSizeLimit {
        }

        export interface WorkflowTemplateSpecVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface WorkflowTemplateSpecVolumesFlexVolume {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesFlexVolumeSecretRef>;
        }

        export interface WorkflowTemplateSpecVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesGlusterfs {
            endpoints: pulumi.Input<string>;
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecVolumesHostPath {
            path: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesIscsiSecretRef>;
            targetPortal: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesNfs {
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesPersistentVolumeClaim {
            claimName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesProjectedSources>[]>;
        }

        export interface WorkflowTemplateSpecVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface WorkflowTemplateSpecVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecVolumesProjectedSourcesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface WorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface WorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor>;
            resource: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface WorkflowTemplateSpecVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface WorkflowTemplateSpecVolumesProjectedSourcesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesRbd {
            fsType?: pulumi.Input<string>;
            image: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.argoproj.v1alpha1.WorkflowTemplateSpecVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath: pulumi.Input<string>;
        }

        export interface WorkflowTemplateSpecWorkflowTemplateRef {
            clusterScope?: pulumi.Input<boolean>;
            name?: pulumi.Input<string>;
        }
    }
}
